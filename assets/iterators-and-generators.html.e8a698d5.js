import{r as p,o as t,c as o,a as n,b as c,w as l,F as u,d as s,e as a}from"./app.0186264c.js";import{_ as r}from"./plugin-vue_export-helper.21dcd24c.js";const i={},k=n("h1",{id:"iterators-\u548C-generators",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#iterators-\u548C-generators","aria-hidden":"true"},"#"),s(" Iterators \u548C Generators")],-1),d=s("\u5F53\u4E00\u4E2A\u5BF9\u8C61\u5B9E\u73B0\u4E86"),b=n("code",null,"Symbol.iterator",-1),m=a("\u5C5E\u6027\u65F6\uFF0C\u6211\u4EEC\u8BA4\u4E3A\u5B83\u662F\u53EF\u8FED\u4EE3\u7684\u3002 \u4E00\u4E9B\u5185\u7F6E\u7684\u7C7B\u578B\u5982<code>Array</code>\uFF0C<code>Map</code>\uFF0C<code>Set</code>\uFF0C<code>String</code>\uFF0C<code>Int32Array</code>\uFF0C<code>Uint32Array</code>\u7B49\u90FD\u5DF2\u7ECF\u5B9E\u73B0\u4E86\u5404\u81EA\u7684<code>Symbol.iterator</code>\u3002 \u5BF9\u8C61\u4E0A\u7684<code>Symbol.iterator</code>\u51FD\u6570\u8D1F\u8D23\u8FD4\u56DE\u4F9B\u8FED\u4EE3\u7684\u503C\u3002",17),f=a(`<h2 id="for-of-\u8BED\u53E5" tabindex="-1"><a class="header-anchor" href="#for-of-\u8BED\u53E5" aria-hidden="true">#</a> <code>for..of</code> \u8BED\u53E5</h2><p><code>for..of</code>\u4F1A\u904D\u5386\u53EF\u8FED\u4EE3\u7684\u5BF9\u8C61\uFF0C\u8C03\u7528\u5BF9\u8C61\u4E0A\u7684<code>Symbol.iterator</code>\u65B9\u6CD5\u3002 \u4E0B\u9762\u662F\u5728\u6570\u7EC4\u4E0A\u4F7F\u7528<code>for..of</code>\u7684\u7B80\u5355\u4F8B\u5B50\uFF1A</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">let</span> someArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> entry <span class="token keyword">of</span> someArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1, &quot;string&quot;, false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="for-of-vs-for-in-\u8BED\u53E5" tabindex="-1"><a class="header-anchor" href="#for-of-vs-for-in-\u8BED\u53E5" aria-hidden="true">#</a> <code>for..of</code> vs. <code>for..in</code> \u8BED\u53E5</h3><p><code>for..of</code>\u548C<code>for..in</code>\u5747\u53EF\u8FED\u4EE3\u4E00\u4E2A\u5217\u8868\uFF1B\u4F46\u662F\u7528\u4E8E\u8FED\u4EE3\u7684\u503C\u5374\u4E0D\u540C\uFF0C<code>for..in</code>\u8FED\u4EE3\u7684\u662F\u5BF9\u8C61\u7684 <em>\u952E</em> \u7684\u5217\u8868\uFF0C\u800C<code>for..of</code>\u5219\u8FED\u4EE3\u5BF9\u8C61\u7684\u952E\u5BF9\u5E94\u7684\u503C\u3002</p><p>\u4E0B\u9762\u7684\u4F8B\u5B50\u5C55\u793A\u4E86\u4E24\u8005\u4E4B\u95F4\u7684\u533A\u522B\uFF1A</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">let</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;0&quot;, &quot;1&quot;, &quot;2&quot;,</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;4&quot;, &quot;5&quot;, &quot;6&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>\u53E6\u4E00\u4E2A\u533A\u522B\u662F<code>for..in</code>\u53EF\u4EE5\u64CD\u4F5C\u4EFB\u4F55\u5BF9\u8C61\uFF1B\u5B83\u63D0\u4F9B\u4E86\u67E5\u770B\u5BF9\u8C61\u5C5E\u6027\u7684\u4E00\u79CD\u65B9\u6CD5\u3002 \u4F46\u662F<code>for..of</code>\u5173\u6CE8\u4E8E\u8FED\u4EE3\u5BF9\u8C61\u7684\u503C\u3002\u5185\u7F6E\u5BF9\u8C61<code>Map</code>\u548C<code>Set</code>\u5DF2\u7ECF\u5B9E\u73B0\u4E86<code>Symbol.iterator</code>\u65B9\u6CD5\uFF0C\u8BA9\u6211\u4EEC\u53EF\u4EE5\u8BBF\u95EE\u5B83\u4EEC\u4FDD\u5B58\u7684\u503C\u3002</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">let</span> pets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;Cat&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Dog&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Hamster&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
pets<span class="token punctuation">[</span><span class="token string">&quot;species&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;mammals&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> pet <span class="token keyword">in</span> pets<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pet<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;species&quot;</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> pet <span class="token keyword">of</span> pets<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pet<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;Cat&quot;, &quot;Dog&quot;, &quot;Hamster&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="\u4EE3\u7801\u751F\u6210" tabindex="-1"><a class="header-anchor" href="#\u4EE3\u7801\u751F\u6210" aria-hidden="true">#</a> \u4EE3\u7801\u751F\u6210</h3><h4 id="\u76EE\u6807\u4E3A-es5-\u548C-es3" tabindex="-1"><a class="header-anchor" href="#\u76EE\u6807\u4E3A-es5-\u548C-es3" aria-hidden="true">#</a> \u76EE\u6807\u4E3A ES5 \u548C ES3</h4><p>\u5F53\u751F\u6210\u76EE\u6807\u4E3AES5\u6216ES3\uFF0C\u8FED\u4EE3\u5668\u53EA\u5141\u8BB8\u5728<code>Array</code>\u7C7B\u578B\u4E0A\u4F7F\u7528\u3002 \u5728\u975E\u6570\u7EC4\u503C\u4E0A\u4F7F\u7528<code>for..of</code>\u8BED\u53E5\u4F1A\u5F97\u5230\u4E00\u4E2A\u9519\u8BEF\uFF0C\u5C31\u7B97\u8FD9\u4E9B\u975E\u6570\u7EC4\u503C\u5DF2\u7ECF\u5B9E\u73B0\u4E86<code>Symbol.iterator</code>\u5C5E\u6027\u3002</p><p>\u7F16\u8BD1\u5668\u4F1A\u751F\u6210\u4E00\u4E2A\u7B80\u5355\u7684<code>for</code>\u5FAA\u73AF\u505A\u4E3A<code>for..of</code>\u5FAA\u73AF\uFF0C\u6BD4\u5982\uFF1A</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> num <span class="token keyword">of</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>\u751F\u6210\u7684\u4EE3\u7801\u4E3A\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> _i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> _i <span class="token operator">&lt;</span> numbers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> _i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> num <span class="token operator">=</span> numbers<span class="token punctuation">[</span>_i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="\u76EE\u6807\u4E3A-ecmascript-2015-\u6216\u66F4\u9AD8" tabindex="-1"><a class="header-anchor" href="#\u76EE\u6807\u4E3A-ecmascript-2015-\u6216\u66F4\u9AD8" aria-hidden="true">#</a> \u76EE\u6807\u4E3A ECMAScript 2015 \u6216\u66F4\u9AD8</h4><p>\u5F53\u76EE\u6807\u4E3A\u517C\u5BB9ECMAScipt 2015\u7684\u5F15\u64CE\u65F6\uFF0C\u7F16\u8BD1\u5668\u4F1A\u751F\u6210\u76F8\u5E94\u5F15\u64CE\u7684<code>for..of</code>\u5185\u7F6E\u8FED\u4EE3\u5668\u5B9E\u73B0\u65B9\u5F0F\u3002</p>`,18);function y(h,g){const e=p("RouterLink");return t(),o(u,null,[k,n("p",null,[d,c(e,{to:"/reference/symbols.html#symboliterator"},{default:l(()=>[b]),_:1}),m]),f],64)}var w=r(i,[["render",y]]);export{w as default};
