import{r as p,o,c,a as s,b as e,F as l,e as t,d as n}from"./app.0186264c.js";import{_ as i}from"./plugin-vue_export-helper.21dcd24c.js";const r={},u=t(`<h1 id="typescript-3-8" tabindex="-1"><a class="header-anchor" href="#typescript-3-8" aria-hidden="true">#</a> TypeScript 3.8</h1><ul><li><a href="#type-only-imports-exports">Type-Only Imports and Exports</a></li><li><a href="#ecmascript-private-fields">ECMAScript Private Fields</a></li><li><a href="#export-star-as-namespace-syntax"><code>export * as ns</code> Syntax</a></li><li><a href="#top-level-await">Top-Level <code>await</code></a></li><li><a href="#jsdoc-modifiers">JSDoc Property Modifiers</a></li><li><a href="#better-directory-watching">Better Directory Watching on Linux and <code>watchOptions</code></a></li><li><a href="#assume-direct-dependencies">&quot;Fast and Loose&quot; Incremental Checking</a></li></ul><h2 id="\u7C7B\u578B\u5BFC\u5165\u548C\u5BFC\u51FA-type-only-imports-and-exports" tabindex="-1"><a class="header-anchor" href="#\u7C7B\u578B\u5BFC\u5165\u548C\u5BFC\u51FA-type-only-imports-and-exports" aria-hidden="true">#</a> <span id="type-only-imports-exports"></span> \u7C7B\u578B\u5BFC\u5165\u548C\u5BFC\u51FA\uFF08Type-Only Imports and Exports\uFF09</h2><p>This feature is something most users may never have to think about; however, if you&#39;ve hit issues under <code>--isolatedModules</code>, TypeScript&#39;s <code>transpileModule</code> API, or Babel, this feature might be relevant.</p><p>TypeScript 3.8 adds a new syntax for type-only imports and exports.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> SomeThing <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./some-module.js&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> SomeThing <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>import type</code> only imports declarations to be used for type annotations and declarations. It <em>always</em> gets fully erased, so there&#39;s no remnant of it at runtime. Similarly, <code>export type</code> only provides an export that can be used for type contexts, and is also erased from TypeScript&#39;s output.</p><p>It&#39;s important to note that classes have a value at runtime and a type at design-time, and the use is context-sensitive. When using <code>import type</code> to import a class, you can&#39;t do things like extend from it.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">ButtonProps</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Button</span> <span class="token keyword">extends</span> <span class="token class-name">Component<span class="token operator">&lt;</span>ButtonProps<span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token comment">//               ~~~~~~~~~</span>
    <span class="token comment">// error! &#39;Component&#39; only refers to a type, but is being used as a value here.</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>If you&#39;ve used Flow before, the syntax is fairly similar. One difference is that we&#39;ve added a few restrictions to avoid code that might appear ambiguous.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// Is only &#39;Foo&#39; a type? Or every declaration in the import?</span>
<span class="token comment">// We just give an error because it&#39;s not clear.</span>

<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token class-name">Foo</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> Bar<span class="token punctuation">,</span> Baz <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;some-module&quot;</span><span class="token punctuation">;</span>
<span class="token comment">//     ~~~~~~~~~~~~~~~~~~~~~~</span>
<span class="token comment">// error! A type-only import can specify a default import or named bindings, but not both.</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>In conjunction with <code>import type</code>, TypeScript 3.8 also adds a new compiler flag to control what happens with imports that won&#39;t be utilized at runtime: <code>importsNotUsedAsValues</code>. This flag takes 3 different values:</p><ul><li><code>remove</code>: this is today&#39;s behavior of dropping these imports. It&#39;s going to continue to be the default, and is a non-breaking change.</li><li><code>preserve</code>: this <em>preserves</em> all imports whose values are never used. This can cause imports/side-effects to be preserved.</li><li><code>error</code>: this preserves all imports (the same as the <code>preserve</code> option), but will error when a value import is only used as a type. This might be useful if you want to ensure no values are being accidentally imported, but still make side-effect imports explicit.</li></ul>`,13),d=n("For more information about the feature, you can "),k={href:"https://github.com/microsoft/TypeScript/pull/35200",target:"_blank",rel:"noopener noreferrer"},m=n("take a look at the pull request"),b=n(", and "),h={href:"https://github.com/microsoft/TypeScript/pull/36092/",target:"_blank",rel:"noopener noreferrer"},y=n("relevant changes"),f=n(" around broadening where imports from an "),g=s("code",null,"import type",-1),w=n(" declaration can be used."),v=s("h2",{id:"ecmascript-\u79C1\u6709\u53D8\u91CF-ecmascript-private-fields",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#ecmascript-\u79C1\u6709\u53D8\u91CF-ecmascript-private-fields","aria-hidden":"true"},"#"),n(),s("span",{id:"ecmascript-private-fields"}),n(" ECMAScript \u79C1\u6709\u53D8\u91CF\uFF08ECMAScript Private Fields")],-1),x=n("TypeScript 3.8 brings support for ECMAScript's private fields, part of the "),_={href:"https://github.com/tc39/proposal-class-fields/",target:"_blank",rel:"noopener noreferrer"},S=n("stage-3 class fields proposal"),q=n("."),T=t(`<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    #name<span class="token operator">:</span> <span class="token builtin">string</span>

    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>#name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>#name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> jeremy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;Jeremy Bearimy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

jeremy<span class="token punctuation">.</span>#name
<span class="token comment">//     ~~~~~</span>
<span class="token comment">// Property &#39;#name&#39; is not accessible outside class &#39;Person&#39;</span>
<span class="token comment">// because it has a private identifier.</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>Unlike regular properties (even ones declared with the <code>private</code> modifier), private fields have a few rules to keep in mind. Some of them are:</p><ul><li>Private fields start with a <code>#</code> character. Sometimes we call these <em>private names</em>.</li><li>Every private field name is uniquely scoped to its containing class.</li><li>TypeScript accessibility modifiers like <code>public</code> or <code>private</code> can&#39;t be used on private fields.</li><li>Private fields can&#39;t be accessed or even detected outside of the containing class - even by JS users! Sometimes we call this <em>hard privacy</em>.</li></ul><p>Apart from &quot;hard&quot; privacy, another benefit of private fields is that uniqueness we just mentioned. For example, regular property declarations are prone to being overwritten in subclasses.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token punctuation">{</span>
    foo <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

    <span class="token function">cHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>foo<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name"><span class="token constant">D</span></span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token punctuation">{</span>
    foo <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>

    <span class="token function">dHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>foo<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">D</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &#39;this.foo&#39; refers to the same property on each instance.</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">cHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// prints &#39;20&#39;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">dHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// prints &#39;20&#39;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>With private fields, you&#39;ll never have to worry about this, since each field name is unique to the containing class.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token punctuation">{</span>
    #foo <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

    <span class="token function">cHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#foo<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name"><span class="token constant">D</span></span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token punctuation">{</span>
    #foo <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>

    <span class="token function">dHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#foo<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">D</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &#39;this.#foo&#39; refers to a different field within each class.</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">cHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// prints &#39;10&#39;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">dHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// prints &#39;20&#39;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>Another thing worth noting is that accessing a private field on any other type will result in a <code>TypeError</code>!</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token punctuation">{</span>
    #sideLength<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>

    <span class="token function">constructor</span><span class="token punctuation">(</span>sideLength<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>#sideLength <span class="token operator">=</span> sideLength<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">equals</span><span class="token punctuation">(</span>other<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#sideLength <span class="token operator">===</span> other<span class="token punctuation">.</span>#sideLength<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Square</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">{</span> sideLength<span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// Boom!</span>
<span class="token comment">// TypeError: attempted to get private field on non-instance</span>
<span class="token comment">// This fails because &#39;b&#39; is not an instance of &#39;Square&#39;.</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>Finally, for any plain <code>.js</code> file users, private fields <em>always</em> have to be declared before they&#39;re assigned to.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">{</span>
    <span class="token comment">// No declaration for &#39;#foo&#39;</span>
    <span class="token comment">// :(</span>

    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">foo</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// SyntaxError!</span>
        <span class="token comment">// &#39;#foo&#39; needs to be declared before writing to it.</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>#foo <span class="token operator">=</span> foo<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>JavaScript has always allowed users to access undeclared properties, whereas TypeScript has always required declarations for class properties. With private fields, declarations are always needed regardless of whether we&#39;re working in <code>.js</code> or <code>.ts</code> files.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> */</span>
    #foo<span class="token punctuation">;</span>

    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">foo</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// This works.</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>#foo <span class="token operator">=</span> foo<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>`,13),j=n("For more information about the implementation, you can "),C={href:"https://github.com/Microsoft/TypeScript/pull/30829",target:"_blank",rel:"noopener noreferrer"},I=n("check out the original pull request"),P=t(`<h3 id="which-should-i-use" tabindex="-1"><a class="header-anchor" href="#which-should-i-use" aria-hidden="true">#</a> Which should I use?</h3><p>We&#39;ve already received many questions on which type of privates you should use as a TypeScript user: most commonly, &quot;should I use the <code>private</code> keyword, or ECMAScript&#39;s hash/pound (<code>#</code>) private fields?&quot; It depends!</p><p>When it comes to properties, TypeScript&#39;s <code>private</code> modifiers are fully erased - that means that at runtime, it acts entirely like a normal property and there&#39;s no way to tell that it was declared with a <code>private modifier. When using the </code>private\` keyword, privacy is only enforced at compile-time/design-time, and for JavaScript consumers it&#39;s entirely intent-based.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> foo <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// This is an error at compile time,</span>
<span class="token comment">// but when TypeScript outputs .js files,</span>
<span class="token comment">// it&#39;ll run fine and print &#39;10&#39;.</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name"><span class="token constant">C</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// prints &#39;10&#39;</span>
<span class="token comment">//                  ~~~</span>
<span class="token comment">// error! Property &#39;foo&#39; is private and only accessible within class &#39;C&#39;.</span>

<span class="token comment">// TypeScript allows this at compile-time</span>
<span class="token comment">// as a &quot;work-around&quot; to avoid the error.</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name"><span class="token constant">C</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// prints &#39;10&#39;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>The upside is that this sort of &quot;soft privacy&quot; can help your consumers temporarily work around not having access to some API, and also works in any runtime.</p><p>On the other hand, ECMAScript&#39;s <code>#</code> privates are completely inaccessible outside of the class.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token punctuation">{</span>
    #foo <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name"><span class="token constant">C</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>#foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// SyntaxError</span>
<span class="token comment">//                  ~~~~</span>
<span class="token comment">// TypeScript reports an error *and*</span>
<span class="token comment">// this won&#39;t work at runtime!</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name"><span class="token constant">C</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&quot;#foo&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// prints undefined</span>
<span class="token comment">//          ~~~~~~~~~~~~~~~</span>
<span class="token comment">// TypeScript reports an error under &#39;noImplicitAny&#39;,</span>
<span class="token comment">// and this prints &#39;undefined&#39;.</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>This hard privacy is really useful for strictly ensuring that nobody can take use of any of your internals. If you&#39;re a library author, removing or renaming a private field should never cause a breaking change.</p><p>As we mentioned, another benefit is that subclassing can be easier with ECMAScript&#39;s <code>#</code> privates because they <em>really</em> are private. When using ECMAScript <code>#</code> private fields, no subclass ever has to worry about collisions in field naming. When it comes to TypeScript&#39;s <code>private</code> property declarations, users still have to be careful not to trample over properties declared in superclasses.</p><p>One more thing to think about is where you intend for your code to run. TypeScript currently can&#39;t support this feature unless targeting ECMAScript 2015 (ES6) targets or higher. This is because our downleveled implementation uses <code>WeakMap</code>s to enforce privacy, and <code>WeakMap</code>s can&#39;t be polyfilled in a way that doesn&#39;t cause memory leaks. In contrast, TypeScript&#39;s <code>private</code>-declared properties work with all targets - even ECMAScript 3!</p><p>A final consideration might be speed: <code>private</code> properties are no different from any other property, so accessing them is as fast as any other property access no matter which runtime you target. In contrast, because <code>#</code> private fields are downleveled using <code>WeakMap</code>s, they may be slower to use. While some runtimes might optimize their actual implementations of <code>#</code> private fields, and even have speedy <code>WeakMap</code> implementations, that might not be the case in all runtimes.</p><h2 id="export-as-ns-syntax" tabindex="-1"><a class="header-anchor" href="#export-as-ns-syntax" aria-hidden="true">#</a> <span id="export-star-as-namespace-syntax"></span> <code>export * as ns</code> Syntax</h2><p>It&#39;s often common to have a single entry-point that exposes all the members of another module as a single member.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> utilities <span class="token keyword">from</span> <span class="token string">&quot;./utilities.js&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> utilities <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>This is so common that ECMAScript 2020 recently added a new syntax to support this pattern!</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">as</span> utilities <span class="token keyword">from</span> <span class="token string">&quot;./utilities.js&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>This is a nice quality-of-life improvement to JavaScript, and TypeScript 3.8 implements this syntax. When your module target is earlier than <code>es2020</code>, TypeScript will output something along the lines of the first code snippet.</p><h2 id="\u9876\u5C42await-top-level-await" tabindex="-1"><a class="header-anchor" href="#\u9876\u5C42await-top-level-await" aria-hidden="true">#</a> <span id="top-level-await"></span> \u9876\u5C42await\uFF08Top-Level await\uFF09</h2><p>TypeScript 3.8 provides support for a handy upcoming ECMAScript feature called &quot;top-level <code>await</code>&quot;.</p><p>JavaScript users often introduce an <code>async</code> function in order to use <code>await</code>, and then immediately called the function after defining it.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&quot;...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> greeting <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>greeting<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>This is because previously in JavaScript (along with most other languages with a similar feature), <code>await</code> was only allowed within the body of an <code>async</code> function. However, with top-level <code>await</code>, we can use <code>await</code> at the top level of a module.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&quot;...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> greeting <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>greeting<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Make sure we&#39;re a module</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Note there&#39;s a subtlety: top-level <code>await</code> only works at the top level of a <em>module</em>, and files are only considered modules when TypeScript finds an <code>import</code> or an <code>export</code>. In some basic cases, you might need to write out <code>export {}</code> as some boilerplate to make sure of this.</p><p>Top level <code>await</code> may not work in all environments where you might expect at this point. Currently, you can only use top level <code>await</code> when the <code>target</code> compiler option is <code>es2017</code> or above, and <code>module</code> is <code>esnext</code> or <code>system</code>. Support within several environments and bundlers may be limited or may require enabling experimental support.</p>`,25),F=n("For more information on our implementation, you can "),E={href:"https://github.com/microsoft/TypeScript/pull/35813",target:"_blank",rel:"noopener noreferrer"},A=n("check out the original pull request"),M=n("."),D=t(`<h2 id="es2020-for-target-and-module" tabindex="-1"><a class="header-anchor" href="#es2020-for-target-and-module" aria-hidden="true">#</a> <span id="es2020-for-target-and-module"></span> <code>es2020</code> for <code>target</code> and <code>module</code></h2><p>TypeScript 3.8 supports <code>es2020</code> as an option for <code>module</code> and <code>target</code>. This will preserve newer ECMAScript 2020 features like optional chaining, nullish coalescing, <code>export * as ns</code>, and dynamic <code>import(...)</code> syntax. It also means <code>bigint</code> literals now have a stable <code>target</code> below <code>esnext</code>.</p><h2 id="jsdoc-\u5C5E\u6027\u4FEE\u9970\u8BCD-jsdoc-property-modifiers" tabindex="-1"><a class="header-anchor" href="#jsdoc-\u5C5E\u6027\u4FEE\u9970\u8BCD-jsdoc-property-modifiers" aria-hidden="true">#</a> <span id="jsdoc-modifiers"></span> JSDoc \u5C5E\u6027\u4FEE\u9970\u8BCD(JSDoc Property Modifiers)</h2><p>TypeScript 3.8 supports JavaScript files by turning on the <code>allowJs</code> flag, and also supports <em>type-checking</em> those JavaScript files via the <code>checkJs</code> option or by adding a <code>// @ts-check</code> comment to the top of your <code>.js</code> files.</p><p>Because JavaScript files don&#39;t have dedicated syntax for type-checking, TypeScript leverages JSDoc. TypeScript 3.8 understands a few new JSDoc tags for properties.</p><p>First are the accessibility modifiers: <code>@public</code>, <code>@private</code>, and <code>@protected</code>. These tags work exactly like <code>public</code>, <code>private</code>, and <code>protected</code> respectively work in TypeScript.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// @ts-check</span>

<span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/** <span class="token keyword">@private</span> */</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>stuff <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">printStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>stuff<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>stuff<span class="token punctuation">;</span>
<span class="token comment">//        ~~~~~</span>
<span class="token comment">// error! Property &#39;stuff&#39; is private and only accessible within class &#39;Foo&#39;.</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><ul><li><code>@public</code> \u662F\u9ED8\u8BA4\u7684\uFF0C\u53EF\u4EE5\u7701\u7565\uFF0C\u5B83\u4EE3\u8868\u4E86\u4E00\u4E2A\u5C5E\u6027\u53EF\u4EE5\u4ECE\u4EFB\u4F55\u5730\u65B9\u8BBF\u95EE\u5B83</li><li><code>@private</code> \u8868\u793A\u4E00\u4E2A\u5C5E\u6027\u53EA\u80FD\u5728\u5305\u542B\u7684\u7C7B\u4E2D\u8BBF\u95EE</li><li><code>@protected</code> \u8868\u793A\u8BE5\u5C5E\u6027\u53EA\u80FD\u5728\u6240\u5305\u542B\u7684\u7C7B\u53CA\u5B50\u7C7B\u4E2D\u8BBF\u95EE\uFF0C\u4F46\u4E0D\u80FD\u5728\u7C7B\u7684\u5B9E\u4F8B\u4E2D\u8BBF\u95EE</li></ul><p>\u4E0B\u4E00\u6B65\uFF0C\u6211\u4EEC\u8BA1\u5212\u6DFB\u52A0 <code>@readonly</code> \u4FEE\u9970\u7B26\uFF0C\u6765\u786E\u4FDD\u4E00\u4E2A\u5C5E\u6027\u53EA\u80FD\u5728\u521D\u59CB\u5316\u65F6\u88AB\u4FEE\u6539\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// @ts-check</span>

<span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/** <span class="token keyword">@readonly</span> */</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>stuff <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">writeToStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>stuff <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
        <span class="token comment">//   ~~~~~</span>
        <span class="token comment">// Cannot assign to &#39;stuff&#39; because it is a read-only property.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>stuff<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token comment">//        ~~~~~</span>
<span class="token comment">// Cannot assign to &#39;stuff&#39; because it is a read-only property.</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="better-directory-watching-on-linux-and-watchoptions" tabindex="-1"><a class="header-anchor" href="#better-directory-watching-on-linux-and-watchoptions" aria-hidden="true">#</a> <span id="better-directory-watching"></span> Better Directory Watching on Linux and <code>watchOptions</code></h2><p>TypeScript 3.8 ships a new strategy for watching directories, which is crucial for efficiently picking up changes to <code>node_modules</code>.</p><p>For some context, on operating systems like Linux, TypeScript installs directory watchers (as opposed to file watchers) on <code>node_modules</code> and many of its subdirectories to detect changes in dependencies. This is because the number of available file watchers is often eclipsed by the of files in <code>node_modules</code>, whereas there are way fewer directories to track.</p><p>Older versions of TypeScript would <em>immediately</em> install directory watchers on folders, and at startup that would be fine; however, during an npm install, a lot of activity will take place within <code>node_modules</code> and that can overwhelm TypeScript, often slowing editor sessions to a crawl. To prevent this, TypeScript 3.8 waits slightly before installing directory watchers to give these highly volatile directories some time to stabilize.</p><p>Because every project might work better under different strategies, and this new approach might not work well for your workflows, TypeScript 3.8 introduces a new <code>watchOptions</code> field in <code>tsconfig.json</code> and <code>jsconfig.json</code> which allows users to tell the compiler/language service which watching strategies should be used to keep track of files and directories.</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token comment">// Some typical compiler options</span>
    <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;target&quot;</span><span class="token operator">:</span> <span class="token string">&quot;es2020&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;moduleResolution&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node&quot;</span><span class="token punctuation">,</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token comment">// NEW: Options for file/directory watching</span>
    <span class="token property">&quot;watchOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">// Use native file system events for files and directories</span>
        <span class="token property">&quot;watchFile&quot;</span><span class="token operator">:</span> <span class="token string">&quot;useFsEvents&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;watchDirectory&quot;</span><span class="token operator">:</span> <span class="token string">&quot;useFsEvents&quot;</span><span class="token punctuation">,</span>

        <span class="token comment">// Poll files for updates more frequently</span>
        <span class="token comment">// when they&#39;re updated a lot.</span>
        <span class="token property">&quot;fallbackPolling&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dynamicPriority&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p><code>watchOptions</code> \u5305\u542B\u56DB\u79CD\u65B0\u7684\u9009\u9879:</p><ul><li><code>watchFile</code>: \u76D1\u542C\u5355\u4E2A\u6587\u4EF6\u7684\u7B56\u7565\uFF0C\u5B83\u53EF\u4EE5\u6709\u4EE5\u4E0B\u503C <ul><li><code>fixedPollingInterval</code>: \u4EE5\u56FA\u5B9A\u7684\u65F6\u95F4\u95F4\u9694\uFF0C\u68C0\u67E5\u6587\u4EF6\u7684\u66F4\u6539</li><li><code>priorityPollingInterval</code>: \u4EE5\u56FA\u5B9A\u7684\u65F6\u95F4\u95F4\u9694\uFF0C\u68C0\u67E5\u6587\u4EF6\u7684\u66F4\u6539\uFF0C\u4F46\u662F\u4F7F\u7528\u300Cheuristics\u300D\u68C0\u67E5\u67D0\u4E9B\u7C7B\u578B\u7684\u6587\u4EF6\u7684\u9891\u7387\u6BD4\u5176\u4ED6\u6587\u4EF6\u4F4E\uFF08heuristics \u600E\u4E48\u7FFB\uFF1F\uFF09</li><li><code>dynamicPriorityPolling</code>: \u4F7F\u7528\u52A8\u6001\u961F\u5217\uFF0C\u5728\u8BE5\u961F\u5217\u4E2D\uFF0C\u8F83\u5C11\u68C0\u67E5\u4E0D\u7ECF\u5E38\u4FEE\u6539\u7684\u6587\u4EF6</li><li><code>useFsEvents</code> \uFF08\u9ED8\u8BA4\uFF09: \u5C1D\u8BD5\u4F7F\u7528\u64CD\u4F5C\u7CFB\u7EDF/\u6587\u4EF6\u7CFB\u7EDF\u539F\u751F\u4E8B\u4EF6\u6765\u76D1\u542C\u6587\u4EF6\u66F4\u6539</li><li><code>useFsEventsOnParentDirectory</code>: \u5C1D\u8BD5\u4F7F\u7528\u64CD\u4F5C\u7CFB\u7EDF/\u6587\u4EF6\u7CFB\u7EDF\u539F\u751F\u4E8B\u4EF6\u6765\u76D1\u542C\u6587\u4EF6\u3001\u76EE\u5F55\u7684\u66F4\u6539\uFF0C\u8FD9\u6837\u53EF\u4EE5\u4F7F\u7528\u8F83\u5C0F\u7684\u6587\u4EF6\u76D1\u542C\u7A0B\u5E8F\uFF0C\u4F46\u662F\u51C6\u786E\u6027\u53EF\u80FD\u8F83\u4F4E</li></ul></li><li><code>watchDirectory</code>: \u5728\u7F3A\u5C11\u9012\u5F52\u6587\u4EF6\u76D1\u542C\u529F\u80FD\u7684\u7CFB\u7EDF\u4E2D\uFF0C\u4F7F\u7528\u54EA\u79CD\u7B56\u7565\u76D1\u542C\u6574\u4E2A\u76EE\u5F55\u6811\uFF0C\u5B83\u53EF\u4EE5\u6709\u4EE5\u4E0B\u503C : <ul><li><code>fixedPollingInterval</code>: \u4EE5\u56FA\u5B9A\u7684\u65F6\u95F4\u95F4\u9694\uFF0C\u68C0\u67E5\u76EE\u5F55\u6811\u7684\u66F4\u6539</li><li><code>dynamicPriorityPolling</code>: \u4F7F\u7528\u52A8\u6001\u961F\u5217\uFF0C\u5728\u8BE5\u961F\u5217\u4E2D\uFF0C\u8F83\u5C11\u68C0\u67E5\u4E0D\u7ECF\u5E38\u4FEE\u6539\u7684\u76EE\u5F55</li><li><code>useFsEvents</code> \uFF08\u9ED8\u8BA4\uFF09: \u5C1D\u8BD5\u4F7F\u7528\u64CD\u4F5C\u7CFB\u7EDF/\u6587\u4EF6\u7CFB\u7EDF\u539F\u751F\u4E8B\u4EF6\u6765\u76D1\u542C\u76EE\u5F55\u66F4\u6539</li></ul></li><li><code>fallbackPolling</code>: \u5F53\u4F7F\u7528\u6587\u4EF6\u7CFB\u7EDF\u7684\u4E8B\u4EF6\uFF0C\u8BE5\u9009\u9879\u7528\u6765\u6307\u5B9A\u4F7F\u7528\u7279\u5B9A\u7B56\u7565\uFF0C\u5B83\u53EF\u4EE5\u6709\u4EE5\u4E0B\u503C <ul><li><code>fixedPollingInterval</code>: <em>(\u540C\u4E0A)</em></li><li><code>priorityPollingInterval</code>: <em>(\u540C\u4E0A)</em></li><li><code>dynamicPriorityPolling</code>: <em>(\u540C\u4E0A)</em></li></ul></li><li><code>synchronousWatchDirectory</code>: \u5728\u76EE\u5F55\u4E0A\u7981\u7528\u5EF6\u8FDF\u76D1\u542C\u529F\u80FD\u3002\u5728\u53EF\u80FD\u4E00\u6B21\u53D1\u751F\u5927\u91CF\u6587\u4EF6\uFF08\u5982 <code>node_modules</code>\uFF09\u66F4\u6539\u65F6\uFF0C\u5B83\u975E\u5E38\u6709\u7528\uFF0C\u4F46\u662F\u4F60\u53EF\u80FD\u9700\u8981\u4E00\u4E9B\u4E0D\u592A\u5E38\u89C1\u7684\u8BBE\u7F6E\u65F6\uFF0C\u7981\u7528\u5B83\u3002</li></ul>`,18),W=n("For more information on these changes, "),B={href:"https://github.com/microsoft/TypeScript/pull/35615",target:"_blank",rel:"noopener noreferrer"},J=n("head over to GitHub to see the pull request"),O=n(" to read more."),L=t(`<h2 id="fast-and-loose-incremental-checking" tabindex="-1"><a class="header-anchor" href="#fast-and-loose-incremental-checking" aria-hidden="true">#</a> <span id="assume-direct-dependencies"></span> &quot;Fast and Loose&quot; Incremental Checking</h2><p>TypeScript 3.8 introduces a new compiler option called <code>assumeChangesOnlyAffectDirectDependencies</code>. When this option is enabled, TypeScript will avoid rechecking/rebuilding all truly possibly-affected files, and only recheck/rebuild files that have changed as well as files that directly import them.</p><p>For example, consider a file <code>fileD.ts</code> that imports <code>fileC.ts</code> that imports <code>fileB.ts</code> that imports <code>fileA.ts</code> as follows:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>fileA.ts &lt;- fileB.ts &lt;- fileC.ts &lt;- fileD.ts
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>In <code>--watch</code> mode, a change in <code>fileA.ts</code> would typically mean that TypeScript would need to at least re-check <code>fileB.ts</code>, <code>fileC.ts</code>, and <code>fileD.ts</code>. Under <code>assumeChangesOnlyAffectDirectDependencies</code>, a change in <code>fileA.ts</code> means that only <code>fileA.ts</code> and <code>fileB.ts</code> need to be re-checked.</p><p>In a codebase like Visual Studio Code, this reduced rebuild times for changes in certain files from about 14 seconds to about 1 second. While we don&#39;t necessarily recommend this option for all codebases, you might be interested if you have an extremely large codebase and are willing to defer full project errors until later (e.g. a dedicated build via a <code>tsconfig.fullbuild.json</code> or in CI).</p>`,6),H=n("For more details, you can "),N={href:"https://github.com/microsoft/TypeScript/pull/35711",target:"_blank",rel:"noopener noreferrer"},V=n("see the original pull request"),z=n(".");function U(G,R){const a=p("ExternalLinkIcon");return o(),c(l,null,[u,s("p",null,[d,s("a",k,[m,e(a)]),b,s("a",h,[y,e(a)]),f,g,w]),v,s("p",null,[x,s("a",_,[S,e(a)]),q]),T,s("p",null,[j,s("a",C,[I,e(a)])]),P,s("p",null,[F,s("a",E,[A,e(a)]),M]),D,s("p",null,[W,s("a",B,[J,e(a)]),O]),L,s("p",null,[H,s("a",N,[V,e(a)]),z])],64)}var Q=i(r,[["render",U]]);export{Q as default};
