import{r as c,o as l,c as r,a as s,b as a,w as o,F as u,d as n,e as t}from"./app.fed89489.js";import{_ as i}from"./plugin-vue_export-helper.21dcd24c.js";const k={},d=s("h1",{id:"\u6A21\u5757",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#\u6A21\u5757","aria-hidden":"true"},"#"),n(" \u6A21\u5757")],-1),m=s("strong",null,"\u5173\u4E8E\u672F\u8BED\u7684\u4E00\u70B9\u8BF4\u660E:",-1),b=n(" \u8BF7\u52A1\u5FC5\u6CE8\u610F\u4E00\u70B9\uFF0CTypeScript 1.5\u91CC\u672F\u8BED\u540D\u5DF2\u7ECF\u53D1\u751F\u4E86\u53D8\u5316\u3002 \u201C\u5185\u90E8\u6A21\u5757\u201D\u73B0\u5728\u79F0\u505A\u201C\u547D\u540D\u7A7A\u95F4\u201D\u3002 \u201C\u5916\u90E8\u6A21\u5757\u201D\u73B0\u5728\u5219\u7B80\u79F0\u4E3A\u201C\u6A21\u5757\u201D\uFF0C\u8FD9\u662F\u4E3A\u4E86\u4E0E"),g={href:"http://www.ecma-international.org/ecma-262/6.0/",target:"_blank",rel:"noopener noreferrer"},y=n("ECMAScript 2015"),w=n("\u91CC\u7684\u672F\u8BED\u4FDD\u6301\u4E00\u81F4\uFF0C(\u4E5F\u5C31\u662F\u8BF4 "),h=s("code",null,"module X {",-1),f=n(" \u76F8\u5F53\u4E8E\u73B0\u5728\u63A8\u8350\u7684\u5199\u6CD5 "),v=s("code",null,"namespace X {",-1),q=n(")\u3002"),x=s("h2",{id:"\u4ECB\u7ECD",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#\u4ECB\u7ECD","aria-hidden":"true"},"#"),n(" \u4ECB\u7ECD")],-1),_=s("p",null,"\u4ECEECMAScript 2015\u5F00\u59CB\uFF0CJavaScript\u5F15\u5165\u4E86\u6A21\u5757\u7684\u6982\u5FF5\u3002TypeScript\u4E5F\u6CBF\u7528\u8FD9\u4E2A\u6982\u5FF5\u3002",-1),C=n("\u6A21\u5757\u5728\u5176\u81EA\u8EAB\u7684\u4F5C\u7528\u57DF\u91CC\u6267\u884C\uFF0C\u800C\u4E0D\u662F\u5728\u5168\u5C40\u4F5C\u7528\u57DF\u91CC\uFF1B\u8FD9\u610F\u5473\u7740\u5B9A\u4E49\u5728\u4E00\u4E2A\u6A21\u5757\u91CC\u7684\u53D8\u91CF\uFF0C\u51FD\u6570\uFF0C\u7C7B\u7B49\u7B49\u5728\u6A21\u5757\u5916\u90E8\u662F\u4E0D\u53EF\u89C1\u7684\uFF0C\u9664\u975E\u4F60\u660E\u786E\u5730\u4F7F\u7528"),V=s("code",null,"export",-1),S=n("\u5F62\u5F0F"),Z=n("\u4E4B\u4E00\u5BFC\u51FA\u5B83\u4EEC\u3002 \u76F8\u53CD\uFF0C\u5982\u679C\u60F3\u4F7F\u7528\u5176\u5B83\u6A21\u5757\u5BFC\u51FA\u7684\u53D8\u91CF\uFF0C\u51FD\u6570\uFF0C\u7C7B\uFF0C\u63A5\u53E3\u7B49\u7684\u65F6\u5019\uFF0C\u4F60\u5FC5\u987B\u8981\u5BFC\u5165\u5B83\u4EEC\uFF0C\u53EF\u4EE5\u4F7F\u7528"),j=s("code",null,"import",-1),A=n("\u5F62\u5F0F"),M=n("\u4E4B\u4E00\u3002"),R=s("p",null,"\u6A21\u5757\u662F\u81EA\u58F0\u660E\u7684\uFF1B\u4E24\u4E2A\u6A21\u5757\u4E4B\u95F4\u7684\u5173\u7CFB\u662F\u901A\u8FC7\u5728\u6587\u4EF6\u7EA7\u522B\u4E0A\u4F7F\u7528imports\u548Cexports\u5EFA\u7ACB\u7684\u3002",-1),T=n("\u6A21\u5757\u4F7F\u7528\u6A21\u5757\u52A0\u8F7D\u5668\u53BB\u5BFC\u5165\u5176\u5B83\u7684\u6A21\u5757\u3002 \u5728\u8FD0\u884C\u65F6\uFF0C\u6A21\u5757\u52A0\u8F7D\u5668\u7684\u4F5C\u7528\u662F\u5728\u6267\u884C\u6B64\u6A21\u5757\u4EE3\u7801\u524D\u53BB\u67E5\u627E\u5E76\u6267\u884C\u8FD9\u4E2A\u6A21\u5757\u7684\u6240\u6709\u4F9D\u8D56\u3002 \u4F17\u6240\u5468\u77E5\u7684JavaScript\u6A21\u5757\u52A0\u8F7D\u5668\u6709\uFF1A\u4F5C\u7528\u4E8E"),P={href:"https://en.wikipedia.org/wiki/CommonJS",target:"_blank",rel:"noopener noreferrer"},L=n("CommonJS"),$=n("\u6A21\u5757\u7684Node.js\u52A0\u8F7D\u5668\u548C\u5728Web\u5E94\u7528\u91CC\u4F5C\u7528\u4E8E"),D={href:"https://github.com/amdjs/amdjs-api/blob/master/AMD.md",target:"_blank",rel:"noopener noreferrer"},J=n("AMD"),E=n("\u6A21\u5757\u7684"),O={href:"http://requirejs.org/",target:"_blank",rel:"noopener noreferrer"},F=n("RequireJS"),N=n("\u52A0\u8F7D\u5668\u3002"),B=t(`<p>TypeScript\u4E0EECMAScript 2015\u4E00\u6837\uFF0C\u4EFB\u4F55\u5305\u542B\u9876\u7EA7<code>import</code>\u6216\u8005<code>export</code>\u7684\u6587\u4EF6\u90FD\u88AB\u5F53\u6210\u4E00\u4E2A\u6A21\u5757\u3002 \u76F8\u53CD\u5730\uFF0C\u5982\u679C\u4E00\u4E2A\u6587\u4EF6\u4E0D\u5E26\u6709\u9876\u7EA7\u7684<code>import</code>\u6216\u8005<code>export</code>\u58F0\u660E\uFF0C\u90A3\u4E48\u5B83\u7684\u5185\u5BB9\u88AB\u89C6\u4E3A\u5168\u5C40\u53EF\u89C1\u7684\uFF08\u56E0\u6B64\u5BF9\u6A21\u5757\u4E5F\u662F\u53EF\u89C1\u7684\uFF09\u3002</p><h2 id="\u5BFC\u51FA" tabindex="-1"><a class="header-anchor" href="#\u5BFC\u51FA" aria-hidden="true">#</a> \u5BFC\u51FA</h2><h3 id="\u5BFC\u51FA\u58F0\u660E" tabindex="-1"><a class="header-anchor" href="#\u5BFC\u51FA\u58F0\u660E" aria-hidden="true">#</a> \u5BFC\u51FA\u58F0\u660E</h3><p>\u4EFB\u4F55\u58F0\u660E\uFF08\u6BD4\u5982\u53D8\u91CF\uFF0C\u51FD\u6570\uFF0C\u7C7B\uFF0C\u7C7B\u578B\u522B\u540D\u6216\u63A5\u53E3\uFF09\u90FD\u80FD\u591F\u901A\u8FC7\u6DFB\u52A0<code>export</code>\u5173\u952E\u5B57\u6765\u5BFC\u51FA\u3002</p><p><strong>StringValidator.ts</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">StringValidator</span> <span class="token punctuation">{</span>
    <span class="token function">isAcceptable</span><span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>ZipCodeValidator.ts</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> StringValidator <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./StringValidator&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> numberRegexp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[0-9]+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ZipCodeValidator</span> <span class="token keyword">implements</span> <span class="token class-name">StringValidator</span> <span class="token punctuation">{</span>
    <span class="token function">isAcceptable</span><span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> s<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span> numberRegexp<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="\u5BFC\u51FA\u8BED\u53E5" tabindex="-1"><a class="header-anchor" href="#\u5BFC\u51FA\u8BED\u53E5" aria-hidden="true">#</a> \u5BFC\u51FA\u8BED\u53E5</h3><p>\u5BFC\u51FA\u8BED\u53E5\u5F88\u4FBF\u5229\uFF0C\u56E0\u4E3A\u6211\u4EEC\u53EF\u80FD\u9700\u8981\u5BF9\u5BFC\u51FA\u7684\u90E8\u5206\u91CD\u547D\u540D\uFF0C\u6240\u4EE5\u4E0A\u9762\u7684\u4F8B\u5B50\u53EF\u4EE5\u8FD9\u6837\u6539\u5199\uFF1A</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">ZipCodeValidator</span> <span class="token keyword">implements</span> <span class="token class-name">StringValidator</span> <span class="token punctuation">{</span>
    <span class="token function">isAcceptable</span><span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> s<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span> numberRegexp<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> ZipCodeValidator <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> ZipCodeValidator <span class="token keyword">as</span> mainValidator <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="\u91CD\u65B0\u5BFC\u51FA" tabindex="-1"><a class="header-anchor" href="#\u91CD\u65B0\u5BFC\u51FA" aria-hidden="true">#</a> \u91CD\u65B0\u5BFC\u51FA</h3><p>\u6211\u4EEC\u7ECF\u5E38\u4F1A\u53BB\u6269\u5C55\u5176\u5B83\u6A21\u5757\uFF0C\u5E76\u4E14\u53EA\u5BFC\u51FA\u90A3\u4E2A\u6A21\u5757\u7684\u90E8\u5206\u5185\u5BB9\u3002 \u91CD\u65B0\u5BFC\u51FA\u529F\u80FD\u5E76\u4E0D\u4F1A\u5728\u5F53\u524D\u6A21\u5757\u5BFC\u5165\u90A3\u4E2A\u6A21\u5757\u6216\u5B9A\u4E49\u4E00\u4E2A\u65B0\u7684\u5C40\u90E8\u53D8\u91CF\u3002</p><p><strong>ParseIntBasedZipCodeValidator.ts</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ParseIntBasedZipCodeValidator</span> <span class="token punctuation">{</span>
    <span class="token function">isAcceptable</span><span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> s<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> s<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// \u5BFC\u51FA\u539F\u5148\u7684\u9A8C\u8BC1\u5668\u4F46\u505A\u4E86\u91CD\u547D\u540D</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span>ZipCodeValidator <span class="token keyword">as</span> RegExpBasedZipCodeValidator<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./ZipCodeValidator&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>\u6216\u8005\u4E00\u4E2A\u6A21\u5757\u53EF\u4EE5\u5305\u88F9\u591A\u4E2A\u6A21\u5757\uFF0C\u5E76\u628A\u4ED6\u4EEC\u5BFC\u51FA\u7684\u5185\u5BB9\u8054\u5408\u5728\u4E00\u8D77\u901A\u8FC7\u8BED\u6CD5\uFF1A<code>export * from &quot;module&quot;</code>\u3002</p><p><strong>AllValidators.ts</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">&quot;./StringValidator&quot;</span><span class="token punctuation">;</span> <span class="token comment">// exports &#39;StringValidator&#39; interface</span>
<span class="token class-name"><span class="token keyword">export</span></span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">&quot;./ZipCodeValidator&quot;</span><span class="token punctuation">;</span>  <span class="token comment">// exports &#39;ZipCodeValidator&#39; and const &#39;numberRegexp&#39; class</span>
<span class="token class-name"><span class="token keyword">export</span></span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">&quot;./ParseIntBasedZipCodeValidator&quot;</span><span class="token punctuation">;</span> <span class="token comment">//  exports the &#39;ParseIntBasedZipCodeValidator&#39; class</span>
                                                 <span class="token comment">// and re-exports &#39;RegExpBasedZipCodeValidator&#39; as alias</span>
                                                 <span class="token comment">// of the &#39;ZipCodeValidator&#39; class from &#39;ZipCodeValidator.ts&#39;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="\u5BFC\u5165" tabindex="-1"><a class="header-anchor" href="#\u5BFC\u5165" aria-hidden="true">#</a> \u5BFC\u5165</h2><p>\u6A21\u5757\u7684\u5BFC\u5165\u64CD\u4F5C\u4E0E\u5BFC\u51FA\u4E00\u6837\u7B80\u5355\u3002 \u53EF\u4EE5\u4F7F\u7528\u4EE5\u4E0B<code>import</code>\u5F62\u5F0F\u4E4B\u4E00\u6765\u5BFC\u5165\u5176\u5B83\u6A21\u5757\u4E2D\u7684\u5BFC\u51FA\u5185\u5BB9\u3002</p><h3 id="\u5BFC\u5165\u4E00\u4E2A\u6A21\u5757\u4E2D\u7684\u67D0\u4E2A\u5BFC\u51FA\u5185\u5BB9" tabindex="-1"><a class="header-anchor" href="#\u5BFC\u5165\u4E00\u4E2A\u6A21\u5757\u4E2D\u7684\u67D0\u4E2A\u5BFC\u51FA\u5185\u5BB9" aria-hidden="true">#</a> \u5BFC\u5165\u4E00\u4E2A\u6A21\u5757\u4E2D\u7684\u67D0\u4E2A\u5BFC\u51FA\u5185\u5BB9</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ZipCodeValidator <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./ZipCodeValidator&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> myValidator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipCodeValidator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>\u53EF\u4EE5\u5BF9\u5BFC\u5165\u5185\u5BB9\u91CD\u547D\u540D</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ZipCodeValidator <span class="token keyword">as</span> <span class="token constant">ZCV</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./ZipCodeValidator&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> myValidator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">ZCV</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="\u5C06\u6574\u4E2A\u6A21\u5757\u5BFC\u5165\u5230\u4E00\u4E2A\u53D8\u91CF-\u5E76\u901A\u8FC7\u5B83\u6765\u8BBF\u95EE\u6A21\u5757\u7684\u5BFC\u51FA\u90E8\u5206" tabindex="-1"><a class="header-anchor" href="#\u5C06\u6574\u4E2A\u6A21\u5757\u5BFC\u5165\u5230\u4E00\u4E2A\u53D8\u91CF-\u5E76\u901A\u8FC7\u5B83\u6765\u8BBF\u95EE\u6A21\u5757\u7684\u5BFC\u51FA\u90E8\u5206" aria-hidden="true">#</a> \u5C06\u6574\u4E2A\u6A21\u5757\u5BFC\u5165\u5230\u4E00\u4E2A\u53D8\u91CF\uFF0C\u5E76\u901A\u8FC7\u5B83\u6765\u8BBF\u95EE\u6A21\u5757\u7684\u5BFC\u51FA\u90E8\u5206</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> validator <span class="token keyword">from</span> <span class="token string">&quot;./ZipCodeValidator&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> myValidator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">validator</span><span class="token punctuation">.</span><span class="token function">ZipCodeValidator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="\u5177\u6709\u526F\u4F5C\u7528\u7684\u5BFC\u5165\u6A21\u5757" tabindex="-1"><a class="header-anchor" href="#\u5177\u6709\u526F\u4F5C\u7528\u7684\u5BFC\u5165\u6A21\u5757" aria-hidden="true">#</a> \u5177\u6709\u526F\u4F5C\u7528\u7684\u5BFC\u5165\u6A21\u5757</h3><p>\u5C3D\u7BA1\u4E0D\u63A8\u8350\u8FD9\u4E48\u505A\uFF0C\u4E00\u4E9B\u6A21\u5757\u4F1A\u8BBE\u7F6E\u4E00\u4E9B\u5168\u5C40\u72B6\u6001\u4F9B\u5176\u5B83\u6A21\u5757\u4F7F\u7528\u3002 \u8FD9\u4E9B\u6A21\u5757\u53EF\u80FD\u6CA1\u6709\u4EFB\u4F55\u7684\u5BFC\u51FA\u6216\u7528\u6237\u6839\u672C\u5C31\u4E0D\u5173\u6CE8\u5B83\u7684\u5BFC\u51FA\u3002 \u4F7F\u7528\u4E0B\u9762\u7684\u65B9\u6CD5\u6765\u5BFC\u5165\u8FD9\u7C7B\u6A21\u5757\uFF1A</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token string">&quot;./my-module.js&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="\u9ED8\u8BA4\u5BFC\u51FA" tabindex="-1"><a class="header-anchor" href="#\u9ED8\u8BA4\u5BFC\u51FA" aria-hidden="true">#</a> \u9ED8\u8BA4\u5BFC\u51FA</h2><p>\u6BCF\u4E2A\u6A21\u5757\u90FD\u53EF\u4EE5\u6709\u4E00\u4E2A<code>default</code>\u5BFC\u51FA\u3002 \u9ED8\u8BA4\u5BFC\u51FA\u4F7F\u7528<code>default</code>\u5173\u952E\u5B57\u6807\u8BB0\uFF1B\u5E76\u4E14\u4E00\u4E2A\u6A21\u5757\u53EA\u80FD\u591F\u6709\u4E00\u4E2A<code>default</code>\u5BFC\u51FA\u3002 \u9700\u8981\u4F7F\u7528\u4E00\u79CD\u7279\u6B8A\u7684\u5BFC\u5165\u5F62\u5F0F\u6765\u5BFC\u5165<code>default</code>\u5BFC\u51FA\u3002</p><p><code>default</code>\u5BFC\u51FA\u5341\u5206\u4FBF\u5229\u3002 \u6BD4\u5982\uFF0C\u50CFjQuery\u8FD9\u6837\u7684\u7C7B\u5E93\u53EF\u80FD\u6709\u4E00\u4E2A\u9ED8\u8BA4\u5BFC\u51FA<code>jQuery</code>\u6216<code>$</code>\uFF0C\u5E76\u4E14\u6211\u4EEC\u57FA\u672C\u4E0A\u4E5F\u4F1A\u4F7F\u7528\u540C\u6837\u7684\u540D\u5B57<code>jQuery</code>\u6216<code>$</code>\u5BFC\u51FAjQuery\u3002</p><p><strong>jQuery.d.ts</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">let</span> $<span class="token operator">:</span> jQuery<span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> $<span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>App.ts</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> $ <span class="token keyword">from</span> <span class="token string">&quot;jQuery&quot;</span><span class="token punctuation">;</span>

<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;button.continue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span> <span class="token string">&quot;Next Step...&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>\u7C7B\u548C\u51FD\u6570\u58F0\u660E\u53EF\u4EE5\u76F4\u63A5\u88AB\u6807\u8BB0\u4E3A\u9ED8\u8BA4\u5BFC\u51FA\u3002 \u6807\u8BB0\u4E3A\u9ED8\u8BA4\u5BFC\u51FA\u7684\u7C7B\u548C\u51FD\u6570\u7684\u540D\u5B57\u662F\u53EF\u4EE5\u7701\u7565\u7684\u3002</p><p><strong>ZipCodeValidator.ts</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">ZipCodeValidator</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> numberRegexp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[0-9]+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
    <span class="token function">isAcceptable</span><span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> s<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span> ZipCodeValidator<span class="token punctuation">.</span>numberRegexp<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>Test.ts</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> validator <span class="token keyword">from</span> <span class="token string">&quot;./ZipCodeValidator&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> myValidator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">validator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>\u6216\u8005</p><p><strong>StaticZipCodeValidator.ts</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> numberRegexp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[0-9]+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> s<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span> numberRegexp<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>Test.ts</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> validate <span class="token keyword">from</span> <span class="token string">&quot;./StaticZipCodeValidator&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> strings <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;98052&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;101&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// Use function validate</span>
strings<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>s<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">validate</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&quot;matches&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;does not match&quot;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><code>default</code>\u5BFC\u51FA\u4E5F\u53EF\u4EE5\u662F\u4E00\u4E2A\u503C</p><p><strong>OneTwoThree.ts</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>Log.ts</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> num <span class="token keyword">from</span> <span class="token string">&quot;./OneTwoThree&quot;</span><span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;123&quot;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="export-\u548C-import-require" tabindex="-1"><a class="header-anchor" href="#export-\u548C-import-require" aria-hidden="true">#</a> <code>export =</code> \u548C <code>import = require()</code></h2><p>CommonJS\u548CAMD\u7684\u73AF\u5883\u91CC\u90FD\u6709\u4E00\u4E2A<code>exports</code>\u53D8\u91CF\uFF0C\u8FD9\u4E2A\u53D8\u91CF\u5305\u542B\u4E86\u4E00\u4E2A\u6A21\u5757\u7684\u6240\u6709\u5BFC\u51FA\u5185\u5BB9\u3002</p><p>CommonJS\u548CAMD\u7684<code>exports</code>\u90FD\u53EF\u4EE5\u88AB\u8D4B\u503C\u4E3A\u4E00\u4E2A<code>\u5BF9\u8C61</code>, \u8FD9\u79CD\u60C5\u51B5\u4E0B\u5176\u4F5C\u7528\u5C31\u7C7B\u4F3C\u4E8E es6 \u8BED\u6CD5\u91CC\u7684\u9ED8\u8BA4\u5BFC\u51FA\uFF0C\u5373 <code>export default</code>\u8BED\u6CD5\u4E86\u3002\u867D\u7136\u4F5C\u7528\u76F8\u4F3C\uFF0C\u4F46\u662F <code>export default</code> \u8BED\u6CD5\u5E76\u4E0D\u80FD\u517C\u5BB9CommonJS\u548CAMD\u7684<code>exports</code>\u3002</p><p>\u4E3A\u4E86\u652F\u6301CommonJS\u548CAMD\u7684<code>exports</code>, TypeScript\u63D0\u4F9B\u4E86<code>export =</code>\u8BED\u6CD5\u3002</p><p><code>export =</code>\u8BED\u6CD5\u5B9A\u4E49\u4E00\u4E2A\u6A21\u5757\u7684\u5BFC\u51FA<code>\u5BF9\u8C61</code>\u3002 \u8FD9\u91CC\u7684<code>\u5BF9\u8C61</code>\u4E00\u8BCD\u6307\u7684\u662F\u7C7B\uFF0C\u63A5\u53E3\uFF0C\u547D\u540D\u7A7A\u95F4\uFF0C\u51FD\u6570\u6216\u679A\u4E3E\u3002</p><p>\u82E5\u4F7F\u7528<code>export =</code>\u5BFC\u51FA\u4E00\u4E2A\u6A21\u5757\uFF0C\u5219\u5FC5\u987B\u4F7F\u7528TypeScript\u7684\u7279\u5B9A\u8BED\u6CD5<code>import module = require(&quot;module&quot;)</code>\u6765\u5BFC\u5165\u6B64\u6A21\u5757\u3002</p><p><strong>ZipCodeValidator.ts</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">let</span> numberRegexp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[0-9]+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">ZipCodeValidator</span> <span class="token punctuation">{</span>
    <span class="token function">isAcceptable</span><span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> s<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span> numberRegexp<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token operator">=</span> ZipCodeValidator<span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>Test.ts</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> zip <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&quot;./ZipCodeValidator&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Some samples to try</span>
<span class="token keyword">let</span> strings <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;98052&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;101&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// Validators to use</span>
<span class="token keyword">let</span> validator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">zip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Show whether each string passed each validator</span>
strings<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span> s <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; - </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span> validator<span class="token punctuation">.</span><span class="token function">isAcceptable</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&quot;matches&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;does not match&quot;</span> <span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="\u751F\u6210\u6A21\u5757\u4EE3\u7801" tabindex="-1"><a class="header-anchor" href="#\u751F\u6210\u6A21\u5757\u4EE3\u7801" aria-hidden="true">#</a> \u751F\u6210\u6A21\u5757\u4EE3\u7801</h2>`,62),U=n("\u6839\u636E\u7F16\u8BD1\u65F6\u6307\u5B9A\u7684\u6A21\u5757\u76EE\u6807\u53C2\u6570\uFF0C\u7F16\u8BD1\u5668\u4F1A\u751F\u6210\u76F8\u5E94\u7684\u4F9BNode.js ("),I={href:"http://wiki.commonjs.org/wiki/CommonJS",target:"_blank",rel:"noopener noreferrer"},Q=n("CommonJS"),z=n(")\uFF0CRequire.js ("),H={href:"https://github.com/amdjs/amdjs-api/wiki/AMD",target:"_blank",rel:"noopener noreferrer"},X=n("AMD"),W=n(")\uFF0C"),G={href:"https://github.com/umdjs/umd",target:"_blank",rel:"noopener noreferrer"},K=n("UMD"),Y=n(", "),nn={href:"https://github.com/systemjs/systemjs",target:"_blank",rel:"noopener noreferrer"},sn=n("SystemJS"),an=n("\u6216"),pn={href:"http://www.ecma-international.org/ecma-262/6.0/#sec-modules",target:"_blank",rel:"noopener noreferrer"},tn=n("ECMAScript 2015 native modules"),en=n(" (ES6)\u6A21\u5757\u52A0\u8F7D\u7CFB\u7EDF\u4F7F\u7528\u7684\u4EE3\u7801\u3002 \u60F3\u8981\u4E86\u89E3\u751F\u6210\u4EE3\u7801\u4E2D"),on=s("code",null,"define",-1),cn=n("\uFF0C"),ln=s("code",null,"require",-1),rn=n(" \u548C "),un=s("code",null,"register",-1),kn=n("\u7684\u610F\u4E49\uFF0C\u8BF7\u53C2\u8003\u76F8\u5E94\u6A21\u5757\u52A0\u8F7D\u5668\u7684\u6587\u6863\u3002"),dn=t(`<p>\u4E0B\u9762\u7684\u4F8B\u5B50\u8BF4\u660E\u4E86\u5BFC\u5165\u5BFC\u51FA\u8BED\u53E5\u91CC\u4F7F\u7528\u7684\u540D\u5B57\u662F\u600E\u4E48\u8F6C\u6362\u4E3A\u76F8\u5E94\u7684\u6A21\u5757\u52A0\u8F7D\u5668\u4EE3\u7801\u7684\u3002</p><p><strong>SimpleModule.ts</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> m <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&quot;mod&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">let</span> t <span class="token operator">=</span> m<span class="token punctuation">.</span>something <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>AMD / RequireJS SimpleModule.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;require&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;exports&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;./mod&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> mod_1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    exports<span class="token punctuation">.</span>t <span class="token operator">=</span> mod_1<span class="token punctuation">.</span>something <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>CommonJS / Node SimpleModule.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> mod_1 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./mod&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>t <span class="token operator">=</span> mod_1<span class="token punctuation">.</span>something <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>UMD SimpleModule.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">factory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> module <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> module<span class="token punctuation">.</span>exports <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span>require<span class="token punctuation">,</span> exports<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> module<span class="token punctuation">.</span>exports <span class="token operator">=</span> v<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> define <span class="token operator">===</span> <span class="token string">&quot;function&quot;</span> <span class="token operator">&amp;&amp;</span> define<span class="token punctuation">.</span>amd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;require&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;exports&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;./mod&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span> exports</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> mod_1 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./mod&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    exports<span class="token punctuation">.</span>t <span class="token operator">=</span> mod_1<span class="token punctuation">.</span>something <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><strong>System SimpleModule.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>System<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;./mod&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">exports_1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> mod_1<span class="token punctuation">;</span>
    <span class="token keyword">let</span> t<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">setters</span><span class="token operator">:</span><span class="token punctuation">[</span>
            <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">mod_1_1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                mod_1 <span class="token operator">=</span> mod_1_1<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token function-variable function">execute</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">exports_1</span><span class="token punctuation">(</span><span class="token string">&quot;t&quot;</span><span class="token punctuation">,</span> t <span class="token operator">=</span> mod_1<span class="token punctuation">.</span>something <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p><strong>Native ECMAScript 2015 modules SimpleModule.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> something <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./mod&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">let</span> t <span class="token operator">=</span> something <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="\u7B80\u5355\u793A\u4F8B" tabindex="-1"><a class="header-anchor" href="#\u7B80\u5355\u793A\u4F8B" aria-hidden="true">#</a> \u7B80\u5355\u793A\u4F8B</h2><p>\u4E0B\u9762\u6211\u4EEC\u6765\u6574\u7406\u4E00\u4E0B\u524D\u9762\u7684\u9A8C\u8BC1\u5668\u5B9E\u73B0\uFF0C\u6BCF\u4E2A\u6A21\u5757\u53EA\u6709\u4E00\u4E2A\u547D\u540D\u7684\u5BFC\u51FA\u3002</p><p>\u4E3A\u4E86\u7F16\u8BD1\uFF0C\u6211\u4EEC\u5FC5\u9700\u8981\u5728\u547D\u4EE4\u884C\u4E0A\u6307\u5B9A\u4E00\u4E2A\u6A21\u5757\u76EE\u6807\u3002\u5BF9\u4E8ENode.js\u6765\u8BF4\uFF0C\u4F7F\u7528<code>--module commonjs</code>\uFF1B \u5BF9\u4E8ERequire.js\u6765\u8BF4\uFF0C\u4F7F\u7528<code>--module amd</code>\u3002\u6BD4\u5982\uFF1A</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>tsc --module commonjs Test.ts
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>\u7F16\u8BD1\u5B8C\u6210\u540E\uFF0C\u6BCF\u4E2A\u6A21\u5757\u4F1A\u751F\u6210\u4E00\u4E2A\u5355\u72EC\u7684<code>.js</code>\u6587\u4EF6\u3002 \u597D\u6BD4\u4F7F\u7528\u4E86reference\u6807\u7B7E\uFF0C\u7F16\u8BD1\u5668\u4F1A\u6839\u636E<code>import</code>\u8BED\u53E5\u7F16\u8BD1\u76F8\u5E94\u7684\u6587\u4EF6\u3002</p><p><strong>Validation.ts</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">StringValidator</span> <span class="token punctuation">{</span>
    <span class="token function">isAcceptable</span><span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>LettersOnlyValidator.ts</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> StringValidator <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./Validation&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> lettersRegexp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[A-Za-z]+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">LettersOnlyValidator</span> <span class="token keyword">implements</span> <span class="token class-name">StringValidator</span> <span class="token punctuation">{</span>
    <span class="token function">isAcceptable</span><span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> lettersRegexp<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><strong>ZipCodeValidator.ts</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> StringValidator <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./Validation&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> numberRegexp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[0-9]+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ZipCodeValidator</span> <span class="token keyword">implements</span> <span class="token class-name">StringValidator</span> <span class="token punctuation">{</span>
    <span class="token function">isAcceptable</span><span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> s<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span> numberRegexp<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><strong>Test.ts</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> StringValidator <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./Validation&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ZipCodeValidator <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./ZipCodeValidator&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> LettersOnlyValidator <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./LettersOnlyValidator&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// Some samples to try</span>
<span class="token keyword">let</span> strings <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;98052&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;101&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// Validators to use</span>
<span class="token keyword">let</span> validators<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> StringValidator<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
validators<span class="token punctuation">[</span><span class="token string">&quot;ZIP code&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipCodeValidator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
validators<span class="token punctuation">[</span><span class="token string">&quot;Letters only&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LettersOnlyValidator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Show whether each string passed each validator</span>
strings<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> name <span class="token keyword">in</span> validators<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span> s <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; - </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span> validators<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">isAcceptable</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&quot;matches&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;does not match&quot;</span> <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span> name <span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="\u53EF\u9009\u7684\u6A21\u5757\u52A0\u8F7D\u548C\u5176\u5B83\u9AD8\u7EA7\u52A0\u8F7D\u573A\u666F" tabindex="-1"><a class="header-anchor" href="#\u53EF\u9009\u7684\u6A21\u5757\u52A0\u8F7D\u548C\u5176\u5B83\u9AD8\u7EA7\u52A0\u8F7D\u573A\u666F" aria-hidden="true">#</a> \u53EF\u9009\u7684\u6A21\u5757\u52A0\u8F7D\u548C\u5176\u5B83\u9AD8\u7EA7\u52A0\u8F7D\u573A\u666F</h2><p>\u6709\u65F6\u5019\uFF0C\u4F60\u53EA\u60F3\u5728\u67D0\u79CD\u6761\u4EF6\u4E0B\u624D\u52A0\u8F7D\u67D0\u4E2A\u6A21\u5757\u3002 \u5728TypeScript\u91CC\uFF0C\u4F7F\u7528\u4E0B\u9762\u7684\u65B9\u5F0F\u6765\u5B9E\u73B0\u5B83\u548C\u5176\u5B83\u7684\u9AD8\u7EA7\u52A0\u8F7D\u573A\u666F\uFF0C\u6211\u4EEC\u53EF\u4EE5\u76F4\u63A5\u8C03\u7528\u6A21\u5757\u52A0\u8F7D\u5668\u5E76\u4E14\u53EF\u4EE5\u4FDD\u8BC1\u7C7B\u578B\u5B8C\u5168\u3002</p><p>\u7F16\u8BD1\u5668\u4F1A\u68C0\u6D4B\u662F\u5426\u6BCF\u4E2A\u6A21\u5757\u90FD\u4F1A\u5728\u751F\u6210\u7684JavaScript\u4E2D\u7528\u5230\u3002 \u5982\u679C\u4E00\u4E2A\u6A21\u5757\u6807\u8BC6\u7B26\u53EA\u5728\u7C7B\u578B\u6CE8\u89E3\u90E8\u5206\u4F7F\u7528\uFF0C\u5E76\u4E14\u5B8C\u5168\u6CA1\u6709\u5728\u8868\u8FBE\u5F0F\u4E2D\u4F7F\u7528\u65F6\uFF0C\u5C31\u4E0D\u4F1A\u751F\u6210<code>require</code>\u8FD9\u4E2A\u6A21\u5757\u7684\u4EE3\u7801\u3002 \u7701\u7565\u6389\u6CA1\u6709\u7528\u5230\u7684\u5F15\u7528\u5BF9\u6027\u80FD\u63D0\u5347\u662F\u5F88\u6709\u76CA\u7684\uFF0C\u5E76\u540C\u65F6\u63D0\u4F9B\u4E86\u9009\u62E9\u6027\u52A0\u8F7D\u6A21\u5757\u7684\u80FD\u529B\u3002</p><p>\u8FD9\u79CD\u6A21\u5F0F\u7684\u6838\u5FC3\u662F<code>import id = require(&quot;...&quot;)</code>\u8BED\u53E5\u53EF\u4EE5\u8BA9\u6211\u4EEC\u8BBF\u95EE\u6A21\u5757\u5BFC\u51FA\u7684\u7C7B\u578B\u3002 \u6A21\u5757\u52A0\u8F7D\u5668\u4F1A\u88AB\u52A8\u6001\u8C03\u7528\uFF08\u901A\u8FC7<code>require</code>\uFF09\uFF0C\u5C31\u50CF\u4E0B\u9762<code>if</code>\u4EE3\u7801\u5757\u91CC\u90A3\u6837\u3002 \u5B83\u5229\u7528\u4E86\u7701\u7565\u5F15\u7528\u7684\u4F18\u5316\uFF0C\u6240\u4EE5\u6A21\u5757\u53EA\u5728\u88AB\u9700\u8981\u65F6\u52A0\u8F7D\u3002 \u4E3A\u4E86\u8BA9\u8FD9\u4E2A\u6A21\u5757\u5DE5\u4F5C\uFF0C\u4E00\u5B9A\u8981\u6CE8\u610F<code>import</code>\u5B9A\u4E49\u7684\u6807\u8BC6\u7B26\u53EA\u80FD\u5728\u8868\u793A\u7C7B\u578B\u5904\u4F7F\u7528\uFF08\u4E0D\u80FD\u5728\u4F1A\u8F6C\u6362\u6210JavaScript\u7684\u5730\u65B9\uFF09\u3002</p><p>\u4E3A\u4E86\u786E\u4FDD\u7C7B\u578B\u5B89\u5168\u6027\uFF0C\u6211\u4EEC\u53EF\u4EE5\u4F7F\u7528<code>typeof</code>\u5173\u952E\u5B57\u3002 <code>typeof</code>\u5173\u952E\u5B57\uFF0C\u5F53\u5728\u8868\u793A\u7C7B\u578B\u7684\u5730\u65B9\u4F7F\u7528\u65F6\uFF0C\u4F1A\u5F97\u51FA\u4E00\u4E2A\u7C7B\u578B\u503C\uFF0C\u8FD9\u91CC\u5C31\u8868\u793A\u6A21\u5757\u7684\u7C7B\u578B\u3002</p><p><strong>\u793A\u4F8B\uFF1ANode.js\u91CC\u7684\u52A8\u6001\u6A21\u5757\u52A0\u8F7D</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token keyword">require</span><span class="token punctuation">(</span>moduleName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> ZipCodeValidator <span class="token keyword">as</span> Zip <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./ZipCodeValidator&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>needZipValidation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> ZipCodeValidator<span class="token operator">:</span> <span class="token keyword">typeof</span> Zip <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&quot;./ZipCodeValidator&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> validator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipCodeValidator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>validator<span class="token punctuation">.</span><span class="token function">isAcceptable</span><span class="token punctuation">(</span><span class="token string">&quot;...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><strong>\u793A\u4F8B\uFF1Arequire.js\u91CC\u7684\u52A8\u6001\u6A21\u5757\u52A0\u8F7D</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token keyword">require</span><span class="token punctuation">(</span>moduleNames<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function-variable function">onLoad</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> Zip <span class="token keyword">from</span> <span class="token string">&quot;./ZipCodeValidator&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>needZipValidation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;./ZipCodeValidator&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>ZipCodeValidator<span class="token operator">:</span> <span class="token keyword">typeof</span> Zip<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> validator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipCodeValidator</span><span class="token punctuation">.</span><span class="token function">ZipCodeValidator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>validator<span class="token punctuation">.</span><span class="token function">isAcceptable</span><span class="token punctuation">(</span><span class="token string">&quot;...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><strong>\u793A\u4F8B\uFF1ASystem.js\u91CC\u7684\u52A8\u6001\u6A21\u5757\u52A0\u8F7D</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">const</span> System<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> ZipCodeValidator <span class="token keyword">as</span> Zip <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./ZipCodeValidator&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>needZipValidation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span><span class="token function">import</span><span class="token punctuation">(</span><span class="token string">&quot;./ZipCodeValidator&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ZipCodeValidator<span class="token operator">:</span> <span class="token keyword">typeof</span> Zip<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipCodeValidator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">isAcceptable</span><span class="token punctuation">(</span><span class="token string">&quot;...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="\u4F7F\u7528\u5176\u5B83\u7684javascript\u5E93" tabindex="-1"><a class="header-anchor" href="#\u4F7F\u7528\u5176\u5B83\u7684javascript\u5E93" aria-hidden="true">#</a> \u4F7F\u7528\u5176\u5B83\u7684JavaScript\u5E93</h2><p>\u8981\u60F3\u63CF\u8FF0\u975ETypeScript\u7F16\u5199\u7684\u7C7B\u5E93\u7684\u7C7B\u578B\uFF0C\u6211\u4EEC\u9700\u8981\u58F0\u660E\u7C7B\u5E93\u6240\u66B4\u9732\u51FA\u7684API\u3002</p><p>\u6211\u4EEC\u53EB\u5B83\u58F0\u660E\u56E0\u4E3A\u5B83\u4E0D\u662F\u201C\u5916\u90E8\u7A0B\u5E8F\u201D\u7684\u5177\u4F53\u5B9E\u73B0\u3002 \u5B83\u4EEC\u901A\u5E38\u662F\u5728<code>.d.ts</code>\u6587\u4EF6\u91CC\u5B9A\u4E49\u7684\u3002 \u5982\u679C\u4F60\u719F\u6089C/C++\uFF0C\u4F60\u53EF\u4EE5\u628A\u5B83\u4EEC\u5F53\u505A<code>.h</code>\u6587\u4EF6\u3002 \u8BA9\u6211\u4EEC\u770B\u4E00\u4E9B\u4F8B\u5B50\u3002</p><h3 id="\u5916\u90E8\u6A21\u5757" tabindex="-1"><a class="header-anchor" href="#\u5916\u90E8\u6A21\u5757" aria-hidden="true">#</a> \u5916\u90E8\u6A21\u5757</h3><p>\u5728Node.js\u91CC\u5927\u90E8\u5206\u5DE5\u4F5C\u662F\u901A\u8FC7\u52A0\u8F7D\u4E00\u4E2A\u6216\u591A\u4E2A\u6A21\u5757\u5B9E\u73B0\u7684\u3002 \u6211\u4EEC\u53EF\u4EE5\u4F7F\u7528\u9876\u7EA7\u7684<code>export</code>\u58F0\u660E\u6765\u4E3A\u6BCF\u4E2A\u6A21\u5757\u90FD\u5B9A\u4E49\u4E00\u4E2A<code>.d.ts</code>\u6587\u4EF6\uFF0C\u4F46\u6700\u597D\u8FD8\u662F\u5199\u5728\u4E00\u4E2A\u5927\u7684<code>.d.ts</code>\u6587\u4EF6\u91CC\u3002 \u6211\u4EEC\u4F7F\u7528\u4E0E\u6784\u9020\u4E00\u4E2A\u5916\u90E8\u547D\u540D\u7A7A\u95F4\u76F8\u4F3C\u7684\u65B9\u6CD5\uFF0C\u4F46\u662F\u8FD9\u91CC\u4F7F\u7528<code>module</code>\u5173\u952E\u5B57\u5E76\u4E14\u628A\u540D\u5B57\u7528\u5F15\u53F7\u62EC\u8D77\u6765\uFF0C\u65B9\u4FBF\u4E4B\u540E<code>import</code>\u3002 \u4F8B\u5982\uFF1A</p><p><strong>node.d.ts (simplified excerpt)</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&quot;url&quot;</span> <span class="token punctuation">{</span>
    <span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Url</span> <span class="token punctuation">{</span>
        protocol<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
        hostname<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
        pathname<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">parse</span><span class="token punctuation">(</span>urlStr<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> parseQueryString<span class="token operator">?</span><span class="token punctuation">,</span> slashesDenoteHost<span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">:</span> Url<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&quot;path&quot;</span> <span class="token punctuation">{</span>
    <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">normalize</span><span class="token punctuation">(</span>p<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token operator">...</span>paths<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    <span class="token keyword">export</span> <span class="token keyword">let</span> sep<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>\u73B0\u5728\u6211\u4EEC\u53EF\u4EE5<code>/// &lt;reference&gt;</code> <code>node.d.ts</code>\u5E76\u4E14\u4F7F\u7528<code>import url = require(&quot;url&quot;);</code>\u6216<code>import * as URL from &quot;url&quot;</code>\u52A0\u8F7D\u6A21\u5757\u3002</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">/// &lt;reference path=&quot;node.d.ts&quot;/&gt;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> <span class="token constant">URL</span> <span class="token keyword">from</span> <span class="token string">&quot;url&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> myUrl <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&quot;http://www.typescriptlang.org&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="\u5916\u90E8\u6A21\u5757\u7B80\u5199" tabindex="-1"><a class="header-anchor" href="#\u5916\u90E8\u6A21\u5757\u7B80\u5199" aria-hidden="true">#</a> \u5916\u90E8\u6A21\u5757\u7B80\u5199</h4><p>\u5047\u5982\u4F60\u4E0D\u60F3\u5728\u4F7F\u7528\u4E00\u4E2A\u65B0\u6A21\u5757\u4E4B\u524D\u82B1\u65F6\u95F4\u53BB\u7F16\u5199\u58F0\u660E\uFF0C\u4F60\u53EF\u4EE5\u91C7\u7528\u58F0\u660E\u7684\u7B80\u5199\u5F62\u5F0F\u4EE5\u4FBF\u80FD\u591F\u5FEB\u901F\u4F7F\u7528\u5B83\u3002</p><p><strong>declarations.d.ts</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&quot;hot-new-module&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>\u7B80\u5199\u6A21\u5757\u91CC\u6240\u6709\u5BFC\u51FA\u7684\u7C7B\u578B\u5C06\u662F<code>any</code>\u3002</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> x<span class="token punctuation">,</span> <span class="token punctuation">{</span>y<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;hot-new-module&quot;</span><span class="token punctuation">;</span>
<span class="token function">x</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="\u6A21\u5757\u58F0\u660E\u901A\u914D\u7B26" tabindex="-1"><a class="header-anchor" href="#\u6A21\u5757\u58F0\u660E\u901A\u914D\u7B26" aria-hidden="true">#</a> \u6A21\u5757\u58F0\u660E\u901A\u914D\u7B26</h4>`,53),mn=n("\u67D0\u4E9B\u6A21\u5757\u52A0\u8F7D\u5668\u5982"),bn={href:"https://github.com/systemjs/systemjs/blob/master/docs/overview.md#plugin-syntax",target:"_blank",rel:"noopener noreferrer"},gn=n("SystemJS"),yn=n(" \u548C"),wn={href:"https://github.com/amdjs/amdjs-api/blob/master/LoaderPlugins.md",target:"_blank",rel:"noopener noreferrer"},hn=n("AMD"),fn=n("\u652F\u6301\u5BFC\u5165\u975EJavaScript\u5185\u5BB9\u3002 \u5B83\u4EEC\u901A\u5E38\u4F1A\u4F7F\u7528\u4E00\u4E2A\u524D\u7F00\u6216\u540E\u7F00\u6765\u8868\u793A\u7279\u6B8A\u7684\u52A0\u8F7D\u8BED\u6CD5\u3002 \u6A21\u5757\u58F0\u660E\u901A\u914D\u7B26\u53EF\u4EE5\u7528\u6765\u8868\u793A\u8FD9\u4E9B\u60C5\u51B5\u3002"),vn=t(`<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&quot;*!text&quot;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> content<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    <span class="token keyword">export</span> <span class="token keyword">default</span> content<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// Some do it the other way around.</span>
<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&quot;json!*&quot;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> value<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
    <span class="token keyword">export</span> <span class="token keyword">default</span> value<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>\u73B0\u5728\u4F60\u53EF\u4EE5\u5C31\u5BFC\u5165\u5339\u914D<code>&quot;*!text&quot;</code>\u6216<code>&quot;json!*&quot;</code>\u7684\u5185\u5BB9\u4E86\u3002</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> fileContent <span class="token keyword">from</span> <span class="token string">&quot;./xyz.txt!text&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> data <span class="token keyword">from</span> <span class="token string">&quot;json!http://example.com/data.json&quot;</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> fileContent<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="umd\u6A21\u5757" tabindex="-1"><a class="header-anchor" href="#umd\u6A21\u5757" aria-hidden="true">#</a> UMD\u6A21\u5757</h4>`,4),qn=n("\u6709\u4E9B\u6A21\u5757\u88AB\u8BBE\u8BA1\u6210\u517C\u5BB9\u591A\u4E2A\u6A21\u5757\u52A0\u8F7D\u5668\uFF0C\u6216\u8005\u4E0D\u4F7F\u7528\u6A21\u5757\u52A0\u8F7D\u5668\uFF08\u5168\u5C40\u53D8\u91CF\uFF09\u3002 \u5B83\u4EEC\u4EE5"),xn={href:"https://github.com/umdjs/umd",target:"_blank",rel:"noopener noreferrer"},_n=n("UMD"),Cn=n("\u6A21\u5757\u4E3A\u4EE3\u8868\u3002 \u8FD9\u4E9B\u5E93\u53EF\u4EE5\u901A\u8FC7\u5BFC\u5165\u7684\u5F62\u5F0F\u6216\u5168\u5C40\u53D8\u91CF\u7684\u5F62\u5F0F\u8BBF\u95EE\u3002 \u4F8B\u5982\uFF1A"),Vn=t(`<p><strong>math-lib.d.ts</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isPrime</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">as</span> <span class="token keyword">namespace</span> mathLib<span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>\u4E4B\u540E\uFF0C\u8FD9\u4E2A\u5E93\u53EF\u4EE5\u5728\u67D0\u4E2A\u6A21\u5757\u91CC\u901A\u8FC7\u5BFC\u5165\u6765\u4F7F\u7528\uFF1A</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> isPrime <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;math-lib&quot;</span><span class="token punctuation">;</span>
<span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mathLib<span class="token punctuation">.</span><span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ERROR: can&#39;t use the global definition from inside a module</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>\u5B83\u540C\u6837\u53EF\u4EE5\u901A\u8FC7\u5168\u5C40\u53D8\u91CF\u7684\u5F62\u5F0F\u4F7F\u7528\uFF0C\u4F46\u53EA\u80FD\u5728\u67D0\u4E2A\u811A\u672C\u91CC\u3002 \uFF08\u811A\u672C\u662F\u6307\u4E00\u4E2A\u4E0D\u5E26\u6709\u5BFC\u5165\u6216\u5BFC\u51FA\u7684\u6587\u4EF6\u3002\uFF09</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>mathLib<span class="token punctuation">.</span><span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="\u521B\u5EFA\u6A21\u5757\u7ED3\u6784\u6307\u5BFC" tabindex="-1"><a class="header-anchor" href="#\u521B\u5EFA\u6A21\u5757\u7ED3\u6784\u6307\u5BFC" aria-hidden="true">#</a> \u521B\u5EFA\u6A21\u5757\u7ED3\u6784\u6307\u5BFC</h2><h3 id="\u5C3D\u53EF\u80FD\u5730\u5728\u9876\u5C42\u5BFC\u51FA" tabindex="-1"><a class="header-anchor" href="#\u5C3D\u53EF\u80FD\u5730\u5728\u9876\u5C42\u5BFC\u51FA" aria-hidden="true">#</a> \u5C3D\u53EF\u80FD\u5730\u5728\u9876\u5C42\u5BFC\u51FA</h3><p>\u7528\u6237\u5E94\u8BE5\u66F4\u5BB9\u6613\u5730\u4F7F\u7528\u4F60\u6A21\u5757\u5BFC\u51FA\u7684\u5185\u5BB9\u3002 \u5D4C\u5957\u5C42\u6B21\u8FC7\u591A\u4F1A\u53D8\u5F97\u96BE\u4EE5\u5904\u7406\uFF0C\u56E0\u6B64\u4ED4\u7EC6\u8003\u8651\u4E00\u4E0B\u5982\u4F55\u7EC4\u7EC7\u4F60\u7684\u4EE3\u7801\u3002</p><p>\u4ECE\u4F60\u7684\u6A21\u5757\u4E2D\u5BFC\u51FA\u4E00\u4E2A\u547D\u540D\u7A7A\u95F4\u5C31\u662F\u4E00\u4E2A\u589E\u52A0\u5D4C\u5957\u7684\u4F8B\u5B50\u3002 \u867D\u7136\u547D\u540D\u7A7A\u95F4\u6709\u65F6\u5019\u6709\u5B83\u4EEC\u7684\u7528\u5904\uFF0C\u5728\u4F7F\u7528\u6A21\u5757\u7684\u65F6\u5019\u5B83\u4EEC\u989D\u5916\u5730\u589E\u52A0\u4E86\u4E00\u5C42\u3002 \u8FD9\u5BF9\u7528\u6237\u6765\u8BF4\u662F\u5F88\u4E0D\u4FBF\u7684\u5E76\u4E14\u901A\u5E38\u662F\u591A\u4F59\u7684\u3002</p><p>\u5BFC\u51FA\u7C7B\u7684\u9759\u6001\u65B9\u6CD5\u4E5F\u6709\u540C\u6837\u7684\u95EE\u9898 - \u8FD9\u4E2A\u7C7B\u672C\u8EAB\u5C31\u589E\u52A0\u4E86\u4E00\u5C42\u5D4C\u5957\u3002 \u9664\u975E\u5B83\u80FD\u65B9\u4FBF\u8868\u8FF0\u6216\u4FBF\u4E8E\u6E05\u6670\u4F7F\u7528\uFF0C\u5426\u5219\u8BF7\u8003\u8651\u76F4\u63A5\u5BFC\u51FA\u4E00\u4E2A\u8F85\u52A9\u65B9\u6CD5\u3002</p><h4 id="\u5982\u679C\u4EC5\u5BFC\u51FA\u5355\u4E2A-class-\u6216-function-\u4F7F\u7528-export-default" tabindex="-1"><a class="header-anchor" href="#\u5982\u679C\u4EC5\u5BFC\u51FA\u5355\u4E2A-class-\u6216-function-\u4F7F\u7528-export-default" aria-hidden="true">#</a> \u5982\u679C\u4EC5\u5BFC\u51FA\u5355\u4E2A <code>class</code> \u6216 <code>function</code>\uFF0C\u4F7F\u7528 <code>export default</code></h4><p>\u5C31\u50CF\u201C\u5728\u9876\u5C42\u4E0A\u5BFC\u51FA\u201D\u5E2E\u52A9\u51CF\u5C11\u7528\u6237\u4F7F\u7528\u7684\u96BE\u5EA6\uFF0C\u4E00\u4E2A\u9ED8\u8BA4\u7684\u5BFC\u51FA\u4E5F\u80FD\u8D77\u5230\u8FD9\u4E2A\u6548\u679C\u3002 \u5982\u679C\u4E00\u4E2A\u6A21\u5757\u5C31\u662F\u4E3A\u4E86\u5BFC\u51FA\u7279\u5B9A\u7684\u5185\u5BB9\uFF0C\u90A3\u4E48\u4F60\u5E94\u8BE5\u8003\u8651\u4F7F\u7528\u4E00\u4E2A\u9ED8\u8BA4\u5BFC\u51FA\u3002 \u8FD9\u4F1A\u4EE4\u6A21\u5757\u7684\u5BFC\u5165\u548C\u4F7F\u7528\u53D8\u5F97\u4E9B\u8BB8\u7B80\u5355\u3002 \u6BD4\u5982\uFF1A</p><p><strong>MyClass.ts</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">SomeType</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>MyFunc.ts</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">getThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&#39;thing&#39;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>Consumer.ts</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> t <span class="token keyword">from</span> <span class="token string">&quot;./MyClass&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> f <span class="token keyword">from</span> <span class="token string">&quot;./MyFunc&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>\u5BF9\u7528\u6237\u6765\u8BF4\u8FD9\u662F\u6700\u7406\u60F3\u7684\u3002\u4ED6\u4EEC\u53EF\u4EE5\u968F\u610F\u547D\u540D\u5BFC\u5165\u6A21\u5757\u7684\u7C7B\u578B\uFF08\u672C\u4F8B\u4E3A<code>t</code>\uFF09\u5E76\u4E14\u4E0D\u9700\u8981\u591A\u4F59\u7684\uFF08.\uFF09\u6765\u627E\u5230\u76F8\u5173\u5BF9\u8C61\u3002</p><h4 id="\u5982\u679C\u8981\u5BFC\u51FA\u591A\u4E2A\u5BF9\u8C61-\u628A\u5B83\u4EEC\u653E\u5728\u9876\u5C42\u91CC\u5BFC\u51FA" tabindex="-1"><a class="header-anchor" href="#\u5982\u679C\u8981\u5BFC\u51FA\u591A\u4E2A\u5BF9\u8C61-\u628A\u5B83\u4EEC\u653E\u5728\u9876\u5C42\u91CC\u5BFC\u51FA" aria-hidden="true">#</a> \u5982\u679C\u8981\u5BFC\u51FA\u591A\u4E2A\u5BF9\u8C61\uFF0C\u628A\u5B83\u4EEC\u653E\u5728\u9876\u5C42\u91CC\u5BFC\u51FA</h4><p><strong>MyThings.ts</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">SomeType</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">someFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>\u76F8\u53CD\u5730\uFF0C\u5F53\u5BFC\u5165\u7684\u65F6\u5019\uFF1A</p><h4 id="\u660E\u786E\u5730\u5217\u51FA\u5BFC\u5165\u7684\u540D\u5B57" tabindex="-1"><a class="header-anchor" href="#\u660E\u786E\u5730\u5217\u51FA\u5BFC\u5165\u7684\u540D\u5B57" aria-hidden="true">#</a> \u660E\u786E\u5730\u5217\u51FA\u5BFC\u5165\u7684\u540D\u5B57</h4><p><strong>Consumer.ts</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> SomeType<span class="token punctuation">,</span> SomeFunc <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./MyThings&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SomeType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token function">someFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="\u4F7F\u7528\u547D\u540D\u7A7A\u95F4\u5BFC\u5165\u6A21\u5F0F\u5F53\u4F60\u8981\u5BFC\u51FA\u5927\u91CF\u5185\u5BB9\u7684\u65F6\u5019" tabindex="-1"><a class="header-anchor" href="#\u4F7F\u7528\u547D\u540D\u7A7A\u95F4\u5BFC\u5165\u6A21\u5F0F\u5F53\u4F60\u8981\u5BFC\u51FA\u5927\u91CF\u5185\u5BB9\u7684\u65F6\u5019" aria-hidden="true">#</a> \u4F7F\u7528\u547D\u540D\u7A7A\u95F4\u5BFC\u5165\u6A21\u5F0F\u5F53\u4F60\u8981\u5BFC\u51FA\u5927\u91CF\u5185\u5BB9\u7684\u65F6\u5019</h4><p><strong>MyLargeModule.ts</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Tree</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Flower</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>Consumer.ts</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> myLargeModule <span class="token keyword">from</span> <span class="token string">&quot;./MyLargeModule.ts&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">myLargeModule</span><span class="token punctuation">.</span><span class="token function">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="\u4F7F\u7528\u91CD\u65B0\u5BFC\u51FA\u8FDB\u884C\u6269\u5C55" tabindex="-1"><a class="header-anchor" href="#\u4F7F\u7528\u91CD\u65B0\u5BFC\u51FA\u8FDB\u884C\u6269\u5C55" aria-hidden="true">#</a> \u4F7F\u7528\u91CD\u65B0\u5BFC\u51FA\u8FDB\u884C\u6269\u5C55</h3><p>\u4F60\u53EF\u80FD\u7ECF\u5E38\u9700\u8981\u53BB\u6269\u5C55\u4E00\u4E2A\u6A21\u5757\u7684\u529F\u80FD\u3002 JS\u91CC\u5E38\u7528\u7684\u4E00\u4E2A\u6A21\u5F0F\u662FjQuery\u90A3\u6837\u53BB\u6269\u5C55\u539F\u5BF9\u8C61\u3002 \u5982\u6211\u4EEC\u4E4B\u524D\u63D0\u5230\u7684\uFF0C\u6A21\u5757\u4E0D\u4F1A\u50CF\u5168\u5C40\u547D\u540D\u7A7A\u95F4\u5BF9\u8C61\u90A3\u6837\u53BB_\u5408\u5E76_\u3002 \u63A8\u8350\u7684\u65B9\u6848\u662F_\u4E0D\u8981_\u53BB\u6539\u53D8\u539F\u6765\u7684\u5BF9\u8C61\uFF0C\u800C\u662F\u5BFC\u51FA\u4E00\u4E2A\u65B0\u7684\u5B9E\u4F53\u6765\u63D0\u4F9B\u65B0\u7684\u529F\u80FD\u3002</p><p>\u5047\u8BBE<code>Calculator.ts</code>\u6A21\u5757\u91CC\u5B9A\u4E49\u4E86\u4E00\u4E2A\u7B80\u5355\u7684\u8BA1\u7B97\u5668\u5B9E\u73B0\u3002 \u8FD9\u4E2A\u6A21\u5757\u540C\u6837\u63D0\u4F9B\u4E86\u4E00\u4E2A\u8F85\u52A9\u51FD\u6570\u6765\u6D4B\u8BD5\u8BA1\u7B97\u5668\u7684\u529F\u80FD\uFF0C\u901A\u8FC7\u4F20\u5165\u4E00\u7CFB\u5217\u8F93\u5165\u7684\u5B57\u7B26\u4E32\u5E76\u5728\u6700\u540E\u7ED9\u51FA\u7ED3\u679C\u3002</p><p><strong>Calculator.ts</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Calculator</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> current <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> memory <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> operator<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

    <span class="token keyword">protected</span> <span class="token function">processDigit</span><span class="token punctuation">(</span>digit<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> currentValue<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>digit <span class="token operator">&gt;=</span> <span class="token string">&quot;0&quot;</span> <span class="token operator">&amp;&amp;</span> digit <span class="token operator">&lt;=</span> <span class="token string">&quot;9&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> currentValue <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span>digit<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token function">processOperator</span><span class="token punctuation">(</span>operator<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;+&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>operator<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> operator<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token function">evaluateOperator</span><span class="token punctuation">(</span>operator<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> left<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> right<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>operator<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token string">&quot;+&quot;</span><span class="token operator">:</span> <span class="token keyword">return</span> left <span class="token operator">+</span> right<span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token string">&quot;-&quot;</span><span class="token operator">:</span> <span class="token keyword">return</span> left <span class="token operator">-</span> right<span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token string">&quot;*&quot;</span><span class="token operator">:</span> <span class="token keyword">return</span> left <span class="token operator">*</span> right<span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token string">&quot;/&quot;</span><span class="token operator">:</span> <span class="token keyword">return</span> left <span class="token operator">/</span> right<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>operator<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>memory <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">evaluateOperator</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>operator<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>memory<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>memory <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>current<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">handleChar</span><span class="token punctuation">(</span>char<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">===</span> <span class="token string">&quot;=&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">processDigit</span><span class="token punctuation">(</span>char<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">=</span> value<span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">processOperator</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>operator <span class="token operator">=</span> value<span class="token punctuation">;</span>
                    <span class="token keyword">return</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Unsupported input: &#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>char<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>memory<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>c<span class="token operator">:</span> Calculator<span class="token punctuation">,</span> input<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> input<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        c<span class="token punctuation">.</span><span class="token function">handleChar</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">result of &#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>input<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39; is &#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>c<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br></div></div><p>\u4E0B\u9762\u4F7F\u7528\u5BFC\u51FA\u7684<code>test</code>\u51FD\u6570\u6765\u6D4B\u8BD5\u8BA1\u7B97\u5668\u3002</p><p><strong>TestCalculator.ts</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Calculator<span class="token punctuation">,</span> test <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./Calculator&quot;</span><span class="token punctuation">;</span>


<span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">test</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token string">&quot;1+2*33/11=&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// prints 9</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>\u73B0\u5728\u6269\u5C55\u5B83\uFF0C\u6DFB\u52A0\u652F\u6301\u8F93\u5165\u5176\u5B83\u8FDB\u5236\uFF08\u5341\u8FDB\u5236\u4EE5\u5916\uFF09\uFF0C\u8BA9\u6211\u4EEC\u6765\u521B\u5EFA<code>ProgrammerCalculator.ts</code>\u3002</p><p><strong>ProgrammerCalculator.ts</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Calculator <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./Calculator&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">ProgrammerCalculator</span> <span class="token keyword">extends</span> <span class="token class-name">Calculator</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> digits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;4&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;5&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;6&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;7&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;8&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;9&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;A&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;B&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;C&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;D&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;E&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;F&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> base<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> maxBase <span class="token operator">=</span> ProgrammerCalculator<span class="token punctuation">.</span>digits<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>base <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> base <span class="token operator">&gt;</span> maxBase<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">base has to be within 0 to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>maxBase<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> inclusive.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token function">processDigit</span><span class="token punctuation">(</span>digit<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> currentValue<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ProgrammerCalculator<span class="token punctuation">.</span>digits<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>digit<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> currentValue <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>base <span class="token operator">+</span> ProgrammerCalculator<span class="token punctuation">.</span>digits<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>digit<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Export the new extended calculator as Calculator</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> ProgrammerCalculator <span class="token keyword">as</span> Calculator <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// Also, export the helper function</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> test <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./Calculator&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>\u65B0\u7684<code>ProgrammerCalculator</code>\u6A21\u5757\u5BFC\u51FA\u7684API\u4E0E\u539F\u5148\u7684<code>Calculator</code>\u6A21\u5757\u5F88\u76F8\u4F3C\uFF0C\u4F46\u5374\u6CA1\u6709\u6539\u53D8\u539F\u6A21\u5757\u91CC\u7684\u5BF9\u8C61\u3002 \u4E0B\u9762\u662F\u6D4B\u8BD5ProgrammerCalculator\u7C7B\u7684\u4EE3\u7801\uFF1A</p><p><strong>TestProgrammerCalculator.ts</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Calculator<span class="token punctuation">,</span> test <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./ProgrammerCalculator&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Calculator</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">test</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token string">&quot;001+010=&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// prints 3</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="\u6A21\u5757\u91CC\u4E0D\u8981\u4F7F\u7528\u547D\u540D\u7A7A\u95F4" tabindex="-1"><a class="header-anchor" href="#\u6A21\u5757\u91CC\u4E0D\u8981\u4F7F\u7528\u547D\u540D\u7A7A\u95F4" aria-hidden="true">#</a> \u6A21\u5757\u91CC\u4E0D\u8981\u4F7F\u7528\u547D\u540D\u7A7A\u95F4</h3><p>\u5F53\u521D\u6B21\u8FDB\u5165\u57FA\u4E8E\u6A21\u5757\u7684\u5F00\u53D1\u6A21\u5F0F\u65F6\uFF0C\u53EF\u80FD\u603B\u4F1A\u63A7\u5236\u4E0D\u4F4F\u8981\u5C06\u5BFC\u51FA\u5305\u88F9\u5728\u4E00\u4E2A\u547D\u540D\u7A7A\u95F4\u91CC\u3002 \u6A21\u5757\u5177\u6709\u5176\u81EA\u5DF1\u7684\u4F5C\u7528\u57DF\uFF0C\u5E76\u4E14\u53EA\u6709\u5BFC\u51FA\u7684\u58F0\u660E\u624D\u4F1A\u5728\u6A21\u5757\u5916\u90E8\u53EF\u89C1\u3002 \u8BB0\u4F4F\u8FD9\u70B9\uFF0C\u547D\u540D\u7A7A\u95F4\u5728\u4F7F\u7528\u6A21\u5757\u65F6\u51E0\u4E4E\u6CA1\u4EC0\u4E48\u4EF7\u503C\u3002</p><p>\u5728\u7EC4\u7EC7\u65B9\u9762\uFF0C\u547D\u540D\u7A7A\u95F4\u5BF9\u4E8E\u5728\u5168\u5C40\u4F5C\u7528\u57DF\u5185\u5BF9\u903B\u8F91\u4E0A\u76F8\u5173\u7684\u5BF9\u8C61\u548C\u7C7B\u578B\u8FDB\u884C\u5206\u7EC4\u662F\u5F88\u4FBF\u5229\u7684\u3002 \u4F8B\u5982\uFF0C\u5728C#\u91CC\uFF0C\u4F60\u4F1A\u4ECE<code>System.Collections</code>\u91CC\u627E\u5230\u6240\u6709\u96C6\u5408\u7684\u7C7B\u578B\u3002 \u901A\u8FC7\u5C06\u7C7B\u578B\u6709\u5C42\u6B21\u5730\u7EC4\u7EC7\u5728\u547D\u540D\u7A7A\u95F4\u91CC\uFF0C\u53EF\u4EE5\u65B9\u4FBF\u7528\u6237\u627E\u5230\u4E0E\u4F7F\u7528\u90A3\u4E9B\u7C7B\u578B\u3002 \u7136\u800C\uFF0C\u6A21\u5757\u672C\u8EAB\u5DF2\u7ECF\u5B58\u5728\u4E8E\u6587\u4EF6\u7CFB\u7EDF\u4E4B\u4E2D\uFF0C\u8FD9\u662F\u5FC5\u987B\u7684\u3002 \u6211\u4EEC\u5FC5\u987B\u901A\u8FC7\u8DEF\u5F84\u548C\u6587\u4EF6\u540D\u627E\u5230\u5B83\u4EEC\uFF0C\u8FD9\u5DF2\u7ECF\u63D0\u4F9B\u4E86\u4E00\u79CD\u903B\u8F91\u4E0A\u7684\u7EC4\u7EC7\u5F62\u5F0F\u3002 \u6211\u4EEC\u53EF\u4EE5\u521B\u5EFA<code>/collections/generic/</code>\u6587\u4EF6\u5939\uFF0C\u628A\u76F8\u5E94\u6A21\u5757\u653E\u5728\u8FD9\u91CC\u9762\u3002</p><p>\u547D\u540D\u7A7A\u95F4\u5BF9\u89E3\u51B3\u5168\u5C40\u4F5C\u7528\u57DF\u91CC\u547D\u540D\u51B2\u7A81\u6765\u8BF4\u662F\u5F88\u91CD\u8981\u7684\u3002 \u6BD4\u5982\uFF0C\u4F60\u53EF\u4EE5\u6709\u4E00\u4E2A<code>My.Application.Customer.AddForm</code>\u548C<code>My.Application.Order.AddForm</code> -- \u4E24\u4E2A\u7C7B\u578B\u7684\u540D\u5B57\u76F8\u540C\uFF0C\u4F46\u547D\u540D\u7A7A\u95F4\u4E0D\u540C\u3002 \u7136\u800C\uFF0C\u8FD9\u5BF9\u4E8E\u6A21\u5757\u6765\u8BF4\u5374\u4E0D\u662F\u4E00\u4E2A\u95EE\u9898\u3002 \u5728\u4E00\u4E2A\u6A21\u5757\u91CC\uFF0C\u6CA1\u6709\u7406\u7531\u4E24\u4E2A\u5BF9\u8C61\u62E5\u6709\u540C\u4E00\u4E2A\u540D\u5B57\u3002 \u4ECE\u6A21\u5757\u7684\u4F7F\u7528\u89D2\u5EA6\u6765\u8BF4\uFF0C\u4F7F\u7528\u8005\u4F1A\u6311\u51FA\u4ED6\u4EEC\u7528\u6765\u5F15\u7528\u6A21\u5757\u7684\u540D\u5B57\uFF0C\u6240\u4EE5\u4E5F\u6CA1\u6709\u7406\u7531\u53D1\u751F\u91CD\u540D\u7684\u60C5\u51B5\u3002</p>`,50),Sn=n("\u66F4\u591A\u5173\u4E8E\u6A21\u5757\u548C\u547D\u540D\u7A7A\u95F4\u7684\u8D44\u6599\u67E5\u770B"),Zn=n("\u547D\u540D\u7A7A\u95F4\u548C\u6A21\u5757"),jn=t('<h3 id="\u5371\u9669\u4FE1\u53F7" tabindex="-1"><a class="header-anchor" href="#\u5371\u9669\u4FE1\u53F7" aria-hidden="true">#</a> \u5371\u9669\u4FE1\u53F7</h3><p>\u4EE5\u4E0B\u5747\u4E3A\u6A21\u5757\u7ED3\u6784\u4E0A\u7684\u5371\u9669\u4FE1\u53F7\u3002\u91CD\u65B0\u68C0\u67E5\u4EE5\u786E\u4FDD\u4F60\u6CA1\u6709\u5728\u5BF9\u6A21\u5757\u4F7F\u7528\u547D\u540D\u7A7A\u95F4\uFF1A</p><ul><li>\u6587\u4EF6\u7684\u9876\u5C42\u58F0\u660E\u662F<code>export namespace Foo { ... }</code> \uFF08\u5220\u9664<code>Foo</code>\u5E76\u628A\u6240\u6709\u5185\u5BB9\u5411\u4E0A\u5C42\u79FB\u52A8\u4E00\u5C42\uFF09\xA9</li><li>\u591A\u4E2A\u6587\u4EF6\u7684\u9876\u5C42\u5177\u6709\u540C\u6837\u7684<code>export namespace Foo {</code> \uFF08\u4E0D\u8981\u4EE5\u4E3A\u8FD9\u4E9B\u4F1A\u5408\u5E76\u5230\u4E00\u4E2A<code>Foo</code>\u4E2D\uFF01\uFF09</li></ul>',3);function An(Mn,Rn){const p=c("ExternalLinkIcon"),e=c("RouterLink");return l(),r(u,null,[d,s("blockquote",null,[s("p",null,[m,b,s("a",g,[y,a(p)]),w,h,f,v,q])]),x,_,s("p",null,[C,a(e,{to:"/reference/modules.html#export"},{default:o(()=>[V,S]),_:1}),Z,a(e,{to:"/reference/modules.html#import"},{default:o(()=>[j,A]),_:1}),M]),R,s("p",null,[T,s("a",P,[L,a(p)]),$,s("a",D,[J,a(p)]),E,s("a",O,[F,a(p)]),N]),B,s("p",null,[U,s("a",I,[Q,a(p)]),z,s("a",H,[X,a(p)]),W,s("a",G,[K,a(p)]),Y,s("a",nn,[sn,a(p)]),an,s("a",pn,[tn,a(p)]),en,on,cn,ln,rn,un,kn]),dn,s("p",null,[mn,s("a",bn,[gn,a(p)]),yn,s("a",wn,[hn,a(p)]),fn]),vn,s("p",null,[qn,s("a",xn,[_n,a(p)]),Cn]),Vn,s("blockquote",null,[s("p",null,[Sn,a(e,{to:"/reference/namespaces-and-modules.html"},{default:o(()=>[Zn]),_:1})])]),jn],64)}var Ln=i(k,[["render",An]]);export{Ln as default};
